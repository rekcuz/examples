<?xml version="1.0" encoding="UTF-8"?><?workdir /Users/joe.zucker/git/examples/build/ant/temp/temp20170202175149042/archSpec/base?><?workdir-uri file:/Users/joe.zucker/git/examples/build/ant/temp/temp20170202175149042/archSpec/base/?><?path2project ../../?><?path2project-uri ../../?><?doctype-public -//OASIS//DTD DITA Concept//EN?><?doctype-system concept.dtd?><concept xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" xmlns:dita-ot="http://dita-ot.sourceforge.net/ns/201007/dita-ot" class="- topic/topic concept/concept " ditaarch:DITAArchVersion="1.3" domains="(topic concept)                            (topic abbrev-d)                            a(props deliveryTarget)                            (topic equation-d)                            (topic hazard-d)                            (topic hi-d)                            (topic indexing-d)                            (topic markup-d)                            (topic mathml-d)                            (topic pr-d)                            (topic relmgmt-d)                            (topic sw-d)                            (topic svg-d)                            (topic ui-d)                            (topic ut-d)                            (topic markup-d xml-d)   " id="generalize" xml:lang="en-us" xtrc="concept:1;4:43" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
  <title class="- topic/title " xtrc="title:1;5:10" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Generalization</title>
  <shortdesc class="- topic/shortdesc " xtrc="shortdesc:1;6:14" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Specialized content can be generalized to any ancestor type. The generalization process
    can preserve information about the former level of specialization to allow round-tripping
    between specialized and unspecialized forms of the same content.</shortdesc><prolog class="- topic/prolog "><author class="- topic/author " xtrc="author:1;13:11" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/dita-1.3-specification-base.ditamap">OASIS DITA Technical Committee</author></prolog>
  <conbody class="- topic/body  concept/conbody " xtrc="conbody:1;9:12" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
    <p class="- topic/p " xtrc="p:1;10:8" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Generalization serves serveral purposes: <ul class="- topic/ul " id="ul_bbe7b9b5-e877-4a19-ae05-450dd4911304" xtrc="ul:1;10:98" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
        <li class="- topic/li " xtrc="li:1;11:13" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Migration of content (for example, when retiring an unsuccessful specialization)</li>
        <li class="- topic/li " xtrc="li:2;12:13" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Temporary round-tripping (for example, when moving content through a process that is not
          specialization aware and has only been enabled for instances of the base structural
          type)</li>
        <li class="- topic/li " xtrc="li:3;15:13" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Reuse of specialized content in an environment that does not support one or more of its
          specializations (which may be thought of as a special case of round-tripping). </li>
      </ul></p>
    <p class="- topic/p " xtrc="p:2;18:8" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">When generalizing for migration, the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:1;18:53" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> attribute and
        <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:2;19:17" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">domains</xmlatt> attribute should be absent from the generalized instance document,
      so that the default values in the DITA document-type shell will be used. When generalizing for
      round-tripping, the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:3;21:35" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> attribute and <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:4;21:72" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">domains</xmlatt> attribute
        <term class="- topic/term " outputclass="RFC-2119" rev="terminology" xtrc="term:1;22:56" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">SHOULD</term> retain the original specialized
      values in the generalized instance document.</p>
    <p class="- topic/p " xtrc="p:3;24:8" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">All DITA documents contain a mix of markup from at least one structural type and zero or more
      domains. When generalizing the document, any individual structural type or domain can be left
      as-is, or it can be generalized to any of its ancestors.</p>
    <draft-comment author="robander" class="- topic/draft-comment " time="16 February 2015" translate="no" xtrc="draft-comment:1;27:62" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Concerned about the first 2 sentences
      of what follows - seems like this should be up to applications, though we could be helpful and
      point out that this is possible. Mabye in a note? The last sentence does provide a normative
      rule for generalization processors, which may also be questionable but I know I've heard
      people refer to this rule and I don't intend to remove it.<p class="- topic/p " xtrc="p:4;31:68" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Much of what follows also seems
        like implementation advice  (the source/target scenarios), but this has always been
        normative and hasn't changed much from 1.0. For discussion with Kris: how much effort to put
        into redoing this topic? One possibility: simplify this topic to explain what generalization
        means, then list the purposes. Next say that a simple generalization processor should
        generalize structural types back to map or topic, while leaving domains alone. A more
        advanced generalization processor will allow you to specify "Generalize X and its
        descendants", or "Generalize <b class="+ topic/ph hi-d/b " xtrc="b:1;38:41" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">TO</b> Y", or "Generalize X and its descendants to Y".
        Currently that's normative (all generalization processors SHOULD support that). Could still
        be normative, but approaching this way might make the text easier to
      understand?</p></draft-comment>
    <p class="- topic/p " xtrc="p:5;42:8" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">The generalizer can supply the source and target modules for each generalization, for
      example, "generalize from reference to topic". The generalizer can specify multiple target
      modules, for example, "generalize from reference to topic and from ui-d to topic". When the
      source and target modules are not supplied, generalization is assumed to be from all
      structural types to the base (topic or map), and no generalization is performed for domains. </p>
    <draft-comment author="robander" class="- topic/draft-comment " time="16 February 2015" translate="no" xtrc="draft-comment:2;47:62" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Note, the following paragraph is (I
      believe) the only place in the spec where we acknowledge that topic nesting rules cannot be
      inferred from @class and @domains. Of course the very ncext sentence ignores that by stating
      that the doctype can be generated, which is only true if you make assumptions about
      nesting.</draft-comment>
    <p class="- topic/p " xtrc="p:6;52:8" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">The generalizer also can supply the target document-type shell. When the target document type
      is not supplied, the generalized document will not contain a reference to a DITA document-type
      shell. With the exception of topic nesting restrictions, it is possible to generate a document
      type shell based on the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:5;55:39" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> and <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:6;55:66" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">domains</xmlatt> attributes in the
      specialized documents. If the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:7;56:45" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">domains</xmlatt> attribute includes all structural,
      domain, and constraint modules that are used, the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:8;57:65" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">domains</xmlatt> attribute alone is
      sufficient to enable the generation of a document type shell.</p>
    <p class="- topic/p " xtrc="p:7;59:8" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">A generalization process <term class="- topic/term " outputclass="RFC-2119" rev="terminology" xtrc="term:2;59:80" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">SHOULD</term> be able to handle
      cases where it is given: <ul class="- topic/ul " id="ul_049703e0-066c-4184-8cbf-11f1acc0df20" xtrc="ul:2;60:81" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
        <li class="- topic/li " xtrc="li:4;61:13" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Just source modules for generalization (in which case the designated source types are
          generalized to topic or map)</li>
        <li class="- topic/li " xtrc="li:5;63:13" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Just target modules for generalization (in which case all descendants of the target are
          generalized to that target)</li>
        <li class="- topic/li " xtrc="li:6;65:13" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Both (in which case only the specified descendants of the target are generalized to that
          target)</li>
      </ul></p>
    <p class="- topic/p " xtrc="p:8;68:8" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">For each structural type instance, the generalization process checks whether the structural
      type instance is a candidate for generalization, or whether it has domains that are candidates
      for generalization. It is important to be selective about which structural type instances to
      process; if the process simply generalizes every element based on its <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:9;71:85" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt>
      attribute values, an instruction to generalize "reference" to "topic" could leave an
      APIReference topic with an invalid content model, since any elements it reuses from
      "reference" would have been renamed to topic-level equivalents.</p>
    <p class="- topic/p " rev="DITA1.3 proposal-13119" xtrc="p:9;75:37" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">For specific concerns when generalizing structural types with
      dependencies on non-ancestor modules, see <xref class="- topic/xref " href="generalization-w-cross-specialization-dependencies.dita" xtrc="xref:1;78:9" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita" type="concept"><?ditaot gentext?>Generalization with cross-specialization dependencies<?ditaot genshortdesc?><desc class="- topic/desc ">Dependencies across specializations limit generalization targets to those that either   preserve the dependency or eliminate them. Some generalization targets will not be valid and   should be detected before generalization occurs.</desc></xref> .</p>
    <p class="- topic/p " rev="DITA1.3 proposal-13121" xtrc="p:10;79:37" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">For specific concerns when generalizing attributes, see <xref class="- topic/xref " href="attributegeneralize.dita" xtrc="xref:2;80:42" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita" type="concept"><?ditaot gentext?>Attribute generalization<?ditaot genshortdesc?><desc class="- topic/desc ">DITA provides a syntax to generalize attributes that have been specialized from the       <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:1;6:15" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/attributegeneralize.dita">props</xmlatt> or <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:2;6:41" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/attributegeneralize.dita">base</xmlatt> attribute. Specialization-aware processors       <term class="- topic/term " outputclass="RFC-2119" rev="terminology" xtrc="term:1;7:54" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/attributegeneralize.dita">SHOULD</term> process both the specialized and     generalized forms of an attribute as equivalent in their values.</desc></xref>.</p>
    <p class="- topic/p " xtrc="p:11;81:8" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">The <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:10;81:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> attribute for the root element of the structural type is checked
      before generalizing structural types:<simpletable class="- topic/simpletable " keycol="1" xtrc="simpletable:1;82:68" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
        <sthead class="- topic/sthead " xtrc="sthead:1;83:17" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
          <stentry class="- topic/stentry " xtrc="stentry:1;84:21" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita"/>
          <stentry class="- topic/stentry " xtrc="stentry:2;85:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Source module unspecified</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:3;86:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Source module specified</stentry>
        </sthead>
        <strow class="- topic/strow " xtrc="strow:1;88:16" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
          <stentry class="- topic/stentry " xtrc="stentry:4;89:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Target module unspecified</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:5;90:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Generalize this structural type to its base ancestor</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:6;91:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Check whether the root element of the topic type matches a specified source
            module; generalize to its base ancestor if it does, otherwise ignore the structural type
            instance unless it has domains to generalize.</stentry>
        </strow>
        <strow class="- topic/strow " xtrc="strow:2;95:16" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
          <stentry class="- topic/stentry " xtrc="stentry:7;96:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Target module specified</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:8;97:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Check whether the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:11;97:46" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> attribute contains the target module. If
            it does contain the target, rename the element to the value associated with the target
            module. Otherwise, ignore the element.</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:9;100:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">It is an error if the root element matches a specified source but its
              <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:12;101:23" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> attribute does not contain the target. If the root element
            matches a specified source module and its <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:13;102:63" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> attribute does contain
            the target module, generalize to the target module. Otherwise, ignore the structural
            type instance unless it has domains to generalize.</stentry>
        </strow>
      </simpletable></p>
    <p class="- topic/p " xtrc="p:12;107:8" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">The <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:14;107:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">domains</xmlatt> attribute for the root element of the structural type is checked
      before generalizing domains:<simpletable class="- topic/simpletable " keycol="1" xtrc="simpletable:2;108:59" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
        <sthead class="- topic/sthead " xtrc="sthead:2;109:17" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
          <stentry class="- topic/stentry " xtrc="stentry:10;110:21" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita"/>
          <stentry class="- topic/stentry " xtrc="stentry:11;111:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Source module unspecified</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:12;112:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Source module specified</stentry>
        </sthead>
        <strow class="- topic/strow " xtrc="strow:3;114:16" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
          <stentry class="- topic/stentry " xtrc="stentry:13;115:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Target module unspecified</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:14;116:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Do not generalize domain specializations in this structural type.</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:15;117:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Check whether the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:15;117:46" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">domains</xmlatt> attribute lists the specified domain;
            proceed with generalization if it does, otherwise ignore the structural type instance
            unless it is itself a candidate for generalization.</stentry>
        </strow>
        <strow class="- topic/strow " xtrc="strow:4;121:16" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
          <stentry class="- topic/stentry " xtrc="stentry:16;122:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Target module specified</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:17;123:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Check whether the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:16;123:46" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">domains</xmlatt> attribute contains the target module.
            If it does, generalize to the target module. Otherwise, skip the structural type
            instance unless it is itself a candidate for generalization.</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:18;126:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">It is an error if the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:17;126:50" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">domains</xmlatt> attribute matches a specified
            source but the domain value string does not contain the target. If the
              <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:18;128:23" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">domains</xmlatt> attribute matches a specified source module and the domain
            value string does contain the target module, generalize to the target module. Otherwise,
            ignore the structural type instance unless it is itself a candidate for
            generalization.</stentry>
        </strow>
      </simpletable></p>
    <p class="- topic/p " xtrc="p:13;134:8" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">For each element in a candidate structural type instance:<simpletable class="- topic/simpletable " keycol="1" xtrc="simpletable:3;134:89" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
        <sthead class="- topic/sthead " xtrc="sthead:3;135:17" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
          <stentry class="- topic/stentry " xtrc="stentry:19;136:21" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita"/>
          <stentry class="- topic/stentry " xtrc="stentry:20;137:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Source module unspecified</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:21;138:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Source module specified</stentry>
        </sthead>
        <strow class="- topic/strow " xtrc="strow:5;140:16" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
          <stentry class="- topic/stentry " xtrc="stentry:22;141:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Target module unspecified</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:23;142:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">If the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:19;142:35" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> attribute starts with "-" (part of a structural
            type), rename the element to its base ancestor equivalent. Otherwise ignore
            it.</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:24;145:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Check whether the last value of the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:20;145:64" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> attribute matches a
            specified source; generalize to its base ancestor if it does, otherwise ignore the
            element.</stentry>
        </strow>
        <strow class="- topic/strow " xtrc="strow:6;149:16" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">
          <stentry class="- topic/stentry " xtrc="stentry:25;150:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Target module specified</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:26;151:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">Check whether the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:21;151:46" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> attribute contains the target module;
            rename the element to the value associated with the target module if it does contain the
            target, otherwise ignore the element.</stentry>
          <stentry class="- topic/stentry " xtrc="stentry:27;154:20" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">It is an error if the last value in the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:22;154:68" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> attribute matches
            a specified source but the previous values do not include the target. If the last value
            in the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:23;156:28" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> attribute matches a specified source module and the
            previous values do include the target module, rename the element to the value associated
            with the target module. Otherwise, ignore the element.</stentry>
        </strow>
      </simpletable>When renaming elements during round-trip generalization, the generalization
      process <term class="- topic/term " outputclass="RFC-2119" rev="terminology" xtrc="term:3;161:62" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">SHOULD</term> preserve the values of all
      attributes. When renaming elements during one-way or migration generalization, the process
        <term class="- topic/term " outputclass="RFC-2119" rev="terminology" xtrc="term:4;163:56" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">SHOULD</term> preserve the values of all attributes
      except the <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:24;164:26" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">class</xmlatt> and <xmlatt class="+ topic/keyword markup-d/markupname xml-d/xmlatt " xtrc="xmlatt:25;164:53" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/generalize.dita">domains</xmlatt> attribute, both of which should
      be supplied by the target document type.</p>
  </conbody>
<related-links class="- topic/related-links "><linkpool class="- topic/linkpool " xtrc="topicref:18;25:41" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/specialization-and-custom-doctypes.ditamap"><link class="- topic/link " format="dita" href="../../archSpec/base/specialize.dita" mapclass="- map/topicref " role="parent" scope="local" type="concept" xtrc="topicref:13;19:38" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/archSpec/base/specialization-and-custom-doctypes.ditamap"><?ditaot usertext?><linktext class="- topic/linktext "><?ditaot gentext?>Specialization</linktext><?ditaot genshortdesc?><desc class="- topic/desc ">     <ph class="- topic/ph " xtrc="ph:12;68:62" xtrf="file:/Users/joe.zucker/git/examples/source/dita-spec-1-3/common/conref_file.dita">The specialization feature of DITA                                         allows for the creation of new element types and attributes                                         that are explicitly and formally derived from existing                                         types. The resulting specialization allows for the blind                                         interchange of all conforming DITA content and a minimum                                         level of common processing for all DITA content. It also                                         allows specialization-aware processors to add                                         specialization-specific processing to existing base                                         processing. </ph></desc></link></linkpool></related-links></concept>