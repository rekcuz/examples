<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_exw_z2k_xq">
 <title>File naming conventions</title>
 <shortdesc></shortdesc>
 <conbody>
  <section>
   <title>Globally unique identifiers</title>
   <draft-comment author="Kristen Eberlein" time="21 February 2015">
    <p>Content moved from the <b>Vocabulary modules</b> topic. Suggest removing the "that are
     intended to be used outside of a narrowly-restricted context" qualifier.</p>
    <p>Vocabulary modules that are intended to be used outside of a narrowly-restricted context
      <term outputclass="RFC-2119" rev="terminology">SHOULD</term> have one or more associated,
     globally-unique names by which the modules can be referenced without regard to their local
     storage location. The globally-unique names can be public identifiers, URNs, or absolute
     URLs.</p>
   </draft-comment>
  </section>
  <section>
   <title>Module names</title>
   <draft-comment author="Kristen Eberlein" time="21 February 2015">
    <p>Content moved from the <b>DTD: Coding requirements for element type declarations</b>
     topic.</p>
    <p>Each vocabulary module has a short name that is used to construct entity names and other
     names used in associated declarations. Modules <term outputclass="RFC-2119" rev="terminology"
      >MAY</term> also have abbreviated names that further shorten the short name, for example "sw"
     for the "software" domain, where "software" is the short name and "sw" is the abbreviated name. </p>
    <p>For structural modules, the module name <term outputclass="RFC-2119" rev="terminology"
      >MUST</term> be the element type name of the top-level topic or map type defined by the
     module, such as "concept", "bookmap".</p>
    <p>For element domain modules, the module name <term outputclass="RFC-2119" rev="terminology"
      >MUST</term> be a name that reflects the subject domain to which the domain applies, such as
     "highlight", "software". Domain module names should be sufficiently unique that they are
     unlikely to conflict with any other domains.</p>
   </draft-comment>
  </section>
  <section>
   <title>Specialization modules</title>
   <draft-comment author="robander" time="16 February 2015">This clearly needs editing, I'm starting
    the process of moving file name info out of the normative spec, so most of this is moved as-is
    for now, with a &lt;dt> to indicate where it came from. Once content is moved we can work on
    organization.</draft-comment>
   <dl>
    <dlentry>
     <dt>DTD: structural module entity declaration file</dt>
     <dd>For structural modules, the file name is the module name plus the <filepath>ent</filepath>
      extension, e.g. <filepath>concept.ent</filepath>.</dd>
    </dlentry>
    <dlentry>
     <dt>DTD: domain element (or attribute?) entity declaration file</dt>
     <dd><draft-comment author="robander">Taken from "DTD: Coding requirements for element type
       declarations" though I think the rules from "DTD: Coding requirements for attribute domain
       modules" should win for the attribute stuff</draft-comment>For domain modules, the file name
      is the domain name plus <filepath>Domain</filepath> plus the <filepath>ent</filepath>
      extension, e.g. <filepath>highlightDomain.ent</filepath>,
       <filepath>newAttDomain.ent</filepath>.</dd>
    </dlentry>
    <dlentry>
     <dt>DTD: structural module element declaration file</dt>
     <dd>For structural modules, the file name is the module name plus the <filepath>mod</filepath>
      extension, e.g., <filepath>concept.mod</filepath></dd>
    </dlentry>
    <dlentry>
     <dt>DTD: domain element (or attribute?) element declaration file</dt>
     <dd><draft-comment author="robander">NOTE: our topic on coding a DTD attribute module says it
       MUST be one file. Our topic "DTD: Coding requirements for element type declarations" included
       the following language, clearly bundling attributes into the "must have 2 files" group, which
       does not make sense.</draft-comment>For domain modules, the file name is the domain name plus
      "Domain" and the <filepath>mod</filepath> extension, e.g.,
       <filepath>highlightDomain.mod</filepath>, <filepath>newAttDomain.mod</filepath>.</dd>
    </dlentry>
    <dlentry>
     <dt>DTD: Attribute domain</dt>
     <dd>An attribute domain <term>must</term> consist of one file, whose name consists of the
      module name plus <filepath>Domain</filepath> plus the <filepath>ent</filepath> extension. For
      example: <filepath>newAttDomain.ent</filepath> for an attribute named "new". </dd>
    </dlentry>
    <dlentry>
     <dt>From "XML Schema: Coding requirements for element type declarations"</dt>
     <dd>Domain modules <term>must</term> consist of a single XSD document named
        <filepath><varname>modulename</varname>Mod.xsd</filepath>. Structural modules
       <term>must</term> consist of two modules,
       <filepath><varname>modulename</varname>Grp.xsd</filepath>, which contains all element name
      groups, and <filepath><varname>modulename</varname>Mod.xsd</filepath>, which contains all
      other declarations for the module.</dd>
    </dlentry>
    <dlentry>
     <dt>From "XML Schema: Coding requirements for structural modules"</dt>
     <dd>
      <p>A structural vocabulary module <term outputclass="RFC-2119" rev="terminology">MUST</term>
       have two files:</p>
      <ul id="ul_D7BFFD862DE84CBABE9FC4A34BFD430C">
       <li id="li_5E6A30823E6646B582EEDAACFDB332C0">A module schema document. The file name is the
        name of the root structural element plus <filepath>Mod</filepath> plus the
         <filepath>.xsd</filepath> extension. For example, <filepath>conceptMod.xsd</filepath> is
        the module schema document for the concept topic type.</li>
       <li id="li_CA93076E32D344DBB656231FD7D63406">A module group definition schema document. The
        file name is the name of the root structural element plus <filepath>Grp</filepath> plus the
         <filepath>.xsd</filepath> extension. For example, <filepath>conceptGrp.xsd</filepath> is
        the module group definition schema document for the concept topic type.</li>
      </ul>
     </dd>
    </dlentry>
    <dlentry>
     <dt>From "XML Schema: Coding requirements for attribute domain modules"</dt>
     <dd>An attribute domain <term>must</term> consist of one file, whose name consists of the
      module name plus Domain plus the <filepath>xsd</filepath> extension. For example:
      newAttDomain.xsd for an attribute named "new".</dd>
    </dlentry>
    <dlentry>
     <dt>From "RELAX NG: Coding requirements for element type declarations"</dt>
     <dd>
      <p>For modules, the file name takes the following format:</p>
      <simpletable frame="all" relcolwidth="1.0* 3.0*">
       <sthead>
        <stentry>Module type</stentry>
        <stentry>File name</stentry>
       </sthead>
       <strow>
        <stentry>Structural</stentry>
        <stentry><filepath><varname>moduleName</varname>Mod.<varname>extension</varname></filepath></stentry>
       </strow>
       <strow>
        <stentry>Domain</stentry>
        <stentry><filepath><varname>moduleName</varname>DomainMod.<varname>extension</varname></filepath></stentry>
       </strow>
      </simpletable>
      <p>where <varname>moduleName</varname> is the module name, and <varname>extension</varname> is
       either "rng" or "rnc". Examples of file names for structural modules include
        <filepath>conceptMod.rng</filepath> and <filepath>glossentryMod.rnc</filepath>; examples of
       files names for domain modules include <filepath>highlightDomainMod.rng</filepath> and
        <filepath>programmingDomainMod.rnc</filepath>.</p>
     </dd>
    </dlentry>
    <dlentry>
     <dt>From "RELAX NG: Coding requirements for attribute domain modules"</dt>
     <dd>
      <p>An attribute domain <term outputclass="RFC-2119" rev="terminology">MUST</term> consist of
       one file, whose name consists of the module name plus <filepath>DomainMod</filepath> plus the
        <filepath>rng</filepath> or <filepath>rnc</filepath> extension. For example:
        <filepath>newAttDomainMod.rng</filepath> for an attribute named "new". </p>
     </dd>
    </dlentry>
   </dl>
  </section>
  <section>
   <title>Constraint modules</title>
   <dl>
    <dlentry>
     <dt>Structural modules</dt>
     <dd>
      <p>Structural constraint modules <ph rev="targeted-review">should</ph> be named using the
       following format:</p>
      <simpletable frame="all" relcolwidth="1.0* 3.0*" keycol="1">
       <strow>
        <stentry>DTD</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>Tagname</varname>Constraint.mod</filepath></stentry>
       </strow>
       <strow>
        <stentry>RELAX NG</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>Tagname</varname>ConstraintMod.<varname>extension</varname></filepath></stentry>
       </strow>
       <strow>
        <stentry>XSD</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>Tagname</varname>Constraints.xsd</filepath></stentry>
       </strow>
      </simpletable>
      <p>where:</p>
      <ul>
       <li conref="../common/conref_file.dita#reuse_file/qualifier-li"
        conrefend="../common/conref_file.dita#reuse_file/Tagname-li"/>
       <li><varname>extension</varname> is either "rng" or "rnc".</li>
      </ul>
      <p outputclass="example">For example, the file name for the constraint that is applied to the
       general task to create the strict task is
       <filepath>strictTaskbodyConstraint.mod</filepath>.</p>
      <p outputclass="example">For example, the file name for the constraint that is applied to the
       general task to create the strict task type is
        <filepath>strictTaskbodyConstraintMod.rng</filepath>.</p>
     </dd>
    </dlentry>
    <dlentry>
     <dt>Domain modules</dt>
     <dd>
      <p>Domain constraint modules <ph rev="targeted-review">should</ph> be named using the
       following format:</p>
      <simpletable frame="all" relcolwidth="1.0* 3.0*" keycol="1">
       <strow>
        <stentry>DTD</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>domain</varname>DomainConstraint.mod</filepath></stentry>
       </strow>
       <strow>
        <stentry>RELAX NG</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>domain</varname>DomainConstraintMod.<varname>extension</varname></filepath></stentry>
       </strow>
       <strow>
        <stentry>XSD</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>domain</varname>DomainConstraints.xsd</filepath></stentry>
       </strow>
      </simpletable>
      <p>where: </p>
      <ul conref="../common/conref_file.dita#reuse_file/dtd-domains-constraint">
       <li/>
      </ul>
      <p outputclass="example">For example, the file name for a constraint module that removes the
       syntax diagram from the programming domain might be
        <filepath>noSyntaxDiagramProgrammingDomainConstraint.mod</filepath>.</p>
      <p outputclass="example">For example, the name of a domain constraint module that removes
       syntax diagrams from the programming domain <ph rev="targeted-review">might be</ph>
       <filepath>noSyntaxDiagramProgrammingDomainConstraintMod.rng</filepath>.</p>
      <p>Because of restrictions on the redefine feature of XML Schema, it is sometimes necessary to
       use an intermediate level of redefinition, which requires a separate XSD document. In that
       case, the intermediate XSD document <ph rev="targeted-review">should</ph> be named
         <filepath><varname>qualifier</varname><varname>domain</varname>DomainConstraintsInt.xsd</filepath>.</p>
     </dd>
    </dlentry>
   </dl>
  </section>
 </conbody>
</concept>
