<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="keyscope-attribute" rev="DITA1.3 proposal-13004">
  <title>The <xmlatt>keyscope</xmlatt> attribute</title>
  <shortdesc>The <xmlatt>keyscope</xmlatt> attribute consists of one or more space-separated key
    scope names. Map authors define the boundaries for key scopes by specifying the
      <xmlatt>keyscope</xmlatt> attribute on <xmlelement>map</xmlelement> elements,
      <xmlelement>topicref</xmlelement> elements, or elements that are specializations of
      <xmlelement>map</xmlelement> or <xmlelement>topicref</xmlelement>. Such elements, their
    contents, and any locally-scoped content referenced from within the element, are considered to
    be part of the scope. Keys defined within a scope are only directly referenceable from within
    the same scope. They can be referenced from the parent scope using the scope's name, followed by
    a period, followed by the key name.</shortdesc>
  <refbody>
    <section id="duplicate-scope">
      <p>All key scopes are contiguous and non-intersecting. Within a root map, two distinct key
        scopes with the same name have no relationship with each other aside from that implied by
        their relative locations in the key scope hierarchy. They do not, for example, share key
        definitions. The only processing impact of a key scope's names is in defining the prefixes
        used when contributing qualified key names to the parent scope. For example, consider the
        following map segment:</p>
      <codeblock>&lt;map>
  &lt;topicgroup keyscope="xyz" id="scope1">
    &lt;keydef keys="a" id="def1"/>
    &lt;!-- other topic references -->
  &lt;/topicgroup>
  &lt;topicgroup keyscope="xyz" id="scope2">
    &lt;keydef keys="a" id="def2"/>
    &lt;!-- other topic references -->
  &lt;/topicgroup>
  &lt;!-- lots of other content -->
&lt;/map></codeblock>
      <p>This map creates two distinct scopes that happen to use the same name (xyz). This results
        in the following:</p>
      <ul>
        <li>Each <xmlelement>topicgroup</xmlelement> sets a scope of "xyz" and includes a key "a".
          From outside of those two scopes, references to <codeph>keyref="xyz.a"</codeph> (key "a"
          within the scope "xyz") will always resolve to the first instance of that value, which is
          in the first <xmlelement>topicgroup</xmlelement>.</li>
        <li>Within the first <xmlelement>topicgroup</xmlelement>, content uses
            <codeph>keyref="a"</codeph> will resolve to the key in that branch (defined on the
          element with <codeph>id="def1"</codeph>).</li>
        <li>Within the second <xmlelement>topicgroup</xmlelement>, content uses
            <codeph>keyref="a"</codeph> will resolve to the key in that branch (defined on the
          element with <codeph>id="def2"</codeph>).</li>
      </ul>
    </section>
  </refbody>
</reference>
