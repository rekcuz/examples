<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<concept id="condproc-subset" xml:lang="en-us" rev="DITA1.3 proposal-13059a">
    <title>Conditional processing (profiling) on a subset of content</title>
    <shortdesc rev="review-2">Maps or map branches can be filtered independently by adding a
            <xmlelement>ditavalref</xmlelement> element that identifies the DITAVAL rules to use for
        that map or branch. If more than one <xmlelement>ditavalref</xmlelement> element is present
        on a single branch, the enclosing content will be repeated once for each
            <xmlelement>ditavalref</xmlelement>, with each repetition filtered accordingly. Each
            <xmlelement>ditavalref</xmlelement> element also allows the specification of key and
        file renaming rules for its copy of the branch.</shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm>branch filtering</indexterm>
            </keywords>
        </metadata>
    </prolog>
    <conbody>
        <p rev="review-2">Global conditions and <xmlelement>ditavalref</xmlelement> references
            represent a hierarchy of condition sets, with the global conditions being the highest
            set in the hierarchy. Within this hierarchy, ancestor condition sets that set a
            conditional property value to "exclude" override any descendant condition sets that set
            the same property value to "include". Ancestor condition sets that explicitly set a
            conditional property value to "include" do not override descendant condition sets that
            explicitly set that same property value to "exclude". </p>
        <p rev="review-2">The <xmlelement>ditavalref</xmlelement> element is primarily intended to
            help manage conditional processing in the following use cases.</p>
        <ol>
            <li>A set of DITAVAL conditions is applied globally to a content set. However, one
                subset of information needs to be filtered using a different set of DITAVAL
                conditions. This is a common use case when content is aggregated from different
                authoring groups or companies. In this case, the <xmlelement>ditavalref</xmlelement>
                element can be used to selectively filter the subset of information, without
                affecting the rest of the content.</li>
            <li>
                <p>A set of content contains information that is common to all users, along with a
                    subset of information that varies based on a condition such as audience or
                    platform. The subset of information needs to be repeated once for each
                    condition. For example, a set of software documentation contains common
                    information, as well as installation instructions that vary by operating system.
                    In this case, the <xmlelement>ditavalref</xmlelement> element can be used to
                    publish installation instructions that are specific to each operating system,
                    without repeating the common information that is applicable to all operating
                    systems.</p>
                <p>In this case, a fully resolved view of the map contains multiple instances of a
                    single branch of content. This might result in duplicate keys, duplicate key
                    scopes, and URIs that specify the same resource with conflicting conditions.
                    Metadata inside of the <xmlelement>ditavalref</xmlelement> element is available
                    to provide control over these values, so that keys, key scopes, and URIs can be
                    individually referenced within a branch. This means that processors <term
                        outputclass="RFC-2119" rev="terminology">MUST</term> calculate the effects
                    of branch filtering on keys and URIs before they can establish the complete key
                    space for a map.</p>
            </li>
        </ol>
        <p>It is possible for a branch with <xmlelement>ditavalref</xmlelement> already in effect to
            specify an additional <xmlelement>ditavalref</xmlelement>, so that a subset of the
            original branch receives additional filter conditions. In this situation, suffixes and
            prefixes are added using an outer-to-inner approach. For example, using the file name
                <filepath>basefile.dita</filepath>, a branch that added two prefixes and two
            suffixes would result in
                <filepath>parentPrefix-childPrefix-basefile-childSuffix-parentSuffix.dita</filepath>.
            In that sample, the hyphens are part of the specified prefix or suffix (they are not
            added automatically).</p>
        <p>It is an error if <xmlelement>ditavalref</xmlelement> driven branch cloning results in
            multiple distinct copies of a topic having the same resolved name. Processors <term
                outputclass="RFC-2119" rev="terminology">SHOULD</term> report an error in such
            cases. Processors <term outputclass="RFC-2119" rev="terminology">MAY</term> recover by
            using an alternate naming scheme for the conflicting topics.</p>
        <p rev="review-2">It is possible for a single topic to appear in different branches that set
            different conditions, yet still produce the same result. This could happen if all
            conditions actually used within the topic evaluate the same way, while conditions that
            are not used by the topic evaluate differently. For example, two branches might set the
            same filter conditions for all <xmlatt>product</xmlatt> values, but different values for
                <xmlatt>audience</xmlatt>; if the reference topic only includes
                <xmlatt>product</xmlatt> values, then the filtered result for one branch is
            equivalent to the other. A processor <term outputclass="RFC-2119" rev="terminology"
                >MAY</term> consider this form of equivalence when determining if two references to
            the same resource should be reported.</p>
        <!--REPLACED WITH FOLLOWING PARAGRAPH.
<p>One or more <xmlelement>ditavalref</xmlelement> elements can appear as a child of the <xmlelement>map</xmlelement>, which results in the filters being applied to the entire map. Using the <xmlelement>ditavalref</xmlelement> element as a child of a reference to a locally-scoped map (such as within <xmlelement>mapref</xmlelement>) is similar, and results in the conditions being applied to the referenced map. Using the <xmlelement>ditavalref</xmlelement> element within a reference to a map whose <xmlatt>scope</xmlatt> attribute evaluates to "peer" or "external" has no effect.</p>-->
        <p rev="review-2">When a <xmlelement>ditavalref</xmlelement> element occurs as a direct
            child of map, the referenced conditions are applied to the entire map. When a
                <xmlelement>ditavalref</xmlelement> element occurs within a
                <xmlelement>topicref</xmlelement> reference to a local map, the conditions are
            applied to the referenced map. When a <xmlelement>ditavalref</xmlelement> element occurs
            within a <xmlelement>topicref</xmlelement> to a map with <xmlatt>scope</xmlatt> set to
            "peer" or "external", the conditions are not applied to the referenced map. </p>
        <note rev="review-2">The preceding rule is true even when multiple
                <xmlelement>ditavalref</xmlelement> elements occur as direct children of a root map.
            In this case, it is possible that the map could be filtered in a manner that results in
            two or more distinct versions of the <xmlelement>title</xmlelement> or metadata. How
            this is handled is processor dependent. For example, when a root map has 3
                <xmlelement>ditavalref</xmlelement> elements as a direct child of
                <xmlelement>map</xmlelement>, a conversion to EPUB could produce an EPUB with three
            versions of the content, or it could produce three distinct EPUB documents.</note>
        <p>Examples to illustrate each of these conditions are available in <xref
                href="examples-of-branch-filter.dita"/>.</p>
    </conbody>
</concept>

