<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="relax-ng-attribute-domain-module-coding-requirements" rev="DITA1.3 proposal-13112">
 <title>RELAX NG: Coding requirements for <ph rev="review-2">attribute domain modules</ph></title>
 <shortdesc>An attribute domain vocabulary module declares a new attribute specialized from either
  the props <xmlatt/>or <xmlatt>base</xmlatt> attribute. An attribute domain module defines exactly
  one new attribute type.</shortdesc>
 <conbody>
  <draft-comment author="Kristen Eberlein" time="5 April 2014" disposition="accepted">I missed
      incorporating this topic, so it was not present in review #1. It has not yet been edited. I
      did implement the XML mention domain and substituted <xmlelement>varname</xmlelement> elements
      for <xmlelement>i</xmlelement> elements.</draft-comment>
  <p>An attribute domain's name is the name of the attribute plus "Att" to distinguish the attribute
   domain from any element domains with the same name. For example, for an attribute named "new" the
   attribute domain name would be "newAtt". The attribute domain name is used to construct file
   names and pattern names for the domain. </p>
   <p>An attribute domain <term outputclass="RFC-2119" rev="terminology">MUST</term> consist of one
      file. The file <term outputclass="RFC-2119" rev="terminology">MUST</term> have three
      sections:</p>
    <dl>
      <dlentry>
        <dt>Domains attribute contribution</dt>
        <dd>
          <p>The <xmlatt>domains</xmlatt> contribution for attribute domains uses the pattern
              "a(<varname>baseAttributeName</varname>
            <varname>specializedAttributeNames</varname>)" where
              <varname>baseAttributeName</varname> is either "base" or "props" and
              <varname>specializedAttributeNames</varname> is a space-separated list of attribute
            names reflecting the specialization hierarchy of the specialized attribute and ending
            with the name of the specialized attribute defined in the module.</p>
          <p>For example, an attribute specialized directly from <xmlatt>props</xmlatt> would be
            defined using:</p>
          <codeblock>&lt;moduleDesc>
  &lt;!-- ... -->
  &lt;moduleMetadata>
   &lt;!-- ... -->  
    &lt;domainsContribution>a(props deliveryTarget)&lt;/domainsContribution>
  &lt;/moduleMetadata>
&lt;/moduleDesc></codeblock>
          <p>Furthermore, an attribute "myDeliveryTarget" specialized from
              <xmlatt>deliveryTarget</xmlatt> would be defined
            using:<codeblock>&lt;moduleDesc>
  &lt;!-- ... -->
  &lt;moduleMetadata>
    &lt;!-- ... -->  
    &lt;domainsContribution>a(props deliveryTarget myDeliveryTarget)&lt;/domainsContribution>
  &lt;/moduleMetadata>
&lt;/moduleDesc></codeblock></p>
        </dd>
      </dlentry>
      <dlentry>
        <dt>Attribute extension pattern</dt>
        <dd>The attribute extension pattern extends either the <xmlatt>props</xmlatt> or
            <xmlatt>base</xmlatt> attribute set pattern to include the attribute specialization. </dd>
        <dd>For specializations of <xmlatt>props</xmlatt> the pattern <term outputclass="RFC-2119"
            rev="terminology">MUST</term> be named "props-attribute-extensions" and <term
            outputclass="RFC-2119" rev="terminology">MUST</term> specify a <xmlatt>combine</xmlatt>
          value of "interleave". The content of the pattern <term outputclass="RFC-2119"
            rev="terminology">MUST</term> be a reference to the specialized attribute declaration
          pattern. For
            example:<codeblock>&lt;define name="props-attribute-extensions" combine="interleave">
    &lt;ref name="deliveryTargetAtt-d-attribute"/>
&lt;/define></codeblock><p>For
            specializations of <xmlatt>base</xmlatt> the pattern <term outputclass="RFC-2119"
              rev="terminology">MUST</term> be named "base-attribute-extensions" and <term
              outputclass="RFC-2119" rev="terminology">MUST</term> specify a
              <xmlatt>combine</xmlatt> value of "interleave" The content of the pattern <term
              outputclass="RFC-2119" rev="terminology">MUST</term> be a reference to the specialized
            attribute declaration pattern. For
          example:</p><codeblock>&lt;define name="base-attribute-extensions" combine="interleave">
    &lt;ref name="myBaseSpecializationAtt-d-attribute"/>
&lt;/define></codeblock></dd>
      </dlentry>
      <dlentry>
        <dt>Attribute declaration pattern</dt>
        <dd>The specialized attribute <term outputclass="RFC-2119" rev="terminology">MUST</term> be
          declared in a pattern named
            <codeph><varname>domainShortName</varname>-d-attribute</codeph>. The attribute <term
            outputclass="RFC-2119" rev="terminology">MUST</term> be defined as optional. For
          example:<codeblock>&lt;define name="deliveryTargetAtt-d-attribute">
    &lt;optional>
    &lt;attribute name="deliveryTarget"/>
    &lt;/optional>    
&lt;/define></codeblock></dd>
      </dlentry>
    </dl>
 </conbody>
</concept>
