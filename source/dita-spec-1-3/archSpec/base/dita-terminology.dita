<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<concept id="terminology" xml:lang="en-us">
<title>DITA terminology and notation</title>
<shortdesc>The DITA specification uses specific notation and terms to define the components of the
    DITA standard. </shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>notation<indexterm>attribute types</indexterm><indexterm>element
            types</indexterm></indexterm>
        <indexterm>terminology<indexterm>addressing and linking</indexterm><indexterm>basic
            concepts</indexterm><indexterm>modules</indexterm><indexterm>non-normative
            information</indexterm><indexterm>normative
            information</indexterm><indexterm>specialization</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
<conbody>
<section>                <title>Notation</title>
      <draft-comment author="Kristen Eberlein" time="24 March 2014" disposition="open">
        <p>Stan Doherty made the following comment in review #1 concerning the "Cascading of
          attributes and metadata in a DITA map" topic; do we need to add the term cascading to our
          terminology that is explicated in this topic?</p>
        <p>The explicit distinction here between containment hierarchy (mentioned several times
          elsewhere in the spec) and element type hierarchy is very nice . . . might be worth
          promoting to our list of key concepts.</p>
      </draft-comment>
      <draft-comment author="Kristen Eberlein" time="19 January 2015" disposition="open">
        <p>Consider whether we need to add "same-topic fragment identifier" to this topic.</p>
      </draft-comment>                <p><ph>The
following conventions are used throughout the                    
     specification:</ph><dl><dlentry>
<dt>attribute types</dt>
<dd>Attribute names are preceded by @ to distinguish them from elements or surrounding text, for
              example, the <xmlatt>props</xmlatt> or the <xmlatt>class</xmlatt> attribute.</dd>
</dlentry><dlentry>
<dt>element types</dt>
<dd>Element names are delimited with angle brackets (&lt; and >) to distinguish them from
              surrounding text, for example, the <xmlelement>keyword</xmlelement> and the
                <xmlelement>prolog</xmlelement> element.</dd>
</dlentry></dl></p>                <p>In general, the unqualified use of the term <term>map</term> or
          <term>topic</term> can be interpreted to mean "a <xmlelement>map</xmlelement> element and
        any specialization of a <xmlelement>map</xmlelement> element " or "a
          <xmlelement>topic</xmlelement> element or any specialization of a
          <xmlelement>topic</xmlelement> element." <ph rev="review-2">Similarly, the unqualified use
          of an element type name (for example, <xmlelement>p</xmlelement>) can be interpreted to
          mean the element type or any specialization of the element type.</ph></p> 
         </section>
<section>                <title><ph>Normative and non-normative information</ph></title> 
              <p>The DITA specification contains normative and non-normative
information:<dl><dlentry>
<dt>Normative information</dt>
<dd>Normative information is the formal portion of the specification
                                   that describes the rules and requirements
that make up the DITA                                    standard
and which must be followed.</dd>
</dlentry><dlentry>
<dt>Non-normative information</dt>
<dd>Non-normative information includes descriptions that provide background, examples, and other
              useful information that are not formal requirements or rules that must be followed.
              The terms non-normative and informative are used interchangeably.</dd>
</dlentry></dl></p>                <p>All information in the specification
should be considered normative                     unless it is an
example, an appendix, or is explicitly labeled as informative or 
                   non-normative. Appendices are always non-normative,
unless explicitly stated                     otherwise. The DITA specification
contains examples to help clarify or                     illustrate
specific aspects of the specification. Because examples are specific
                    rather than general, they may not illustrate all
aspects or be the only way to                     accomplish or implement
an aspect of the specification. Therefore all examples           
         are non-normative, unless explicitly stated otherwise.</p> 
         </section>
<section>                <title>Basic DITA terminology</title>   
            <p>The following terminology is used to discuss basic
DITA concepts:</p>                <dl><dlentry>
<dt>DITA attribute type</dt>
<dd>An attribute type that is one of the following:<ul>
<li>One of the base attribute types that are defined by the DITA 
                                       specification</li>
<li>A specialization of either the <xmlatt>base</xmlatt> or <xmlatt>props</xmlatt> attribute</li>
</ul></dd>
</dlentry><dlentry>
<dt>DITA document</dt>
<dd>An XML document that conforms to the requirements of this specification. A DITA document <term
              outputclass="RFC-2119" rev="terminology">MUST</term> have as its root element one of the following elements:<ul>
              <li><xmlelement>map</xmlelement> or a specialization of the
                  <xmlelement>map</xmlelement> element</li>
              <li><xmlelement>topic</xmlelement> or a specialization of the
                  <xmlelement>topic</xmlelement> element</li>
              <li><xmlelement>dita</xmlelement>, which cannot be specialized, but which allows
                documents with multiple sibling topics</li>
            </ul></dd>
</dlentry><dlentry>
<dt>DITA document type</dt>
<dd>A unique set of structural modules, domain modules, and constraint modules that taken together
            provide the XML element and attribute declarations that define the structure of DITA
            documents. DITA document types normally are implemented using DITA document-type
            shells.</dd>
</dlentry><dlentry>
<dt>DITA document-type shell</dt>
<dd>A set of <ph rev="DITA1.3 proposal-13112">DTD, XSD, or RELAX NG</ph> declarations that implement
            a DITA document type by using the rules and design patterns that are included in the
            DITA specification. A DITA document-type shell includes and configures one or more
            structural modules, zero or more domain modules, and zero or more constraint modules.
            With the exception of the optional declarations for the <xmlelement>dita</xmlelement>
            element and its attributes, DITA document-type shells do not declare any element or
            attribute types directly.</dd>
</dlentry><dlentry>
<dt>DITA element</dt>
<dd>An XML element instance whose type is a DITA element type. DITA elements must exhibit a
              <xmlatt>class</xmlatt> attribute that has a value that conforms to the rules for
            specialization hierarchy specifications.</dd>
</dlentry><dlentry>
<dt>DITA element type</dt>
<dd>An element type that is one of the following:<ul>
<li>One of the base element types that are defined by the DITA   
                                     specification</li>
<li>A specialization of one of the base element types</li>
</ul>A DITA element type is declared in exactly one vocabulary module.
                              DITA element types may only exhibit
attributes that are DITA attribute                               types.</dd>
</dlentry>
        <dlentry>
          <dt>map branch</dt>
          <dd rev="review-2">A map branch consists of a <xmlelement>topicref</xmlelement> element,
            along with any child elements and all resources that are referenced by the original
            element or its children.</dd>
          <dd>
            <draft-comment author="robander" time="21 April 2014" disposition="open">Wondering if we
              should add "Also referred to simply as 'branch' when used in a map context", or
              perhaps change the term to "map branch or branch" - I do like having it sorted with
              the other map terms, and using "map branch" does that while keeping our current
              alphabetical order.</draft-comment>
          </dd>
        </dlentry><dlentry>
<dt>map instance </dt>
<dd>An occurrence of a map type in a document.</dd>
</dlentry><dlentry>
<dt>map type</dt>
<dd>An element type that defines a set of relationships among topic
                              instances. The map type provides the
root element and, through the                               contained
element types, the substructure for the map instances. The       
                       map substructure provides hierarchy, group,
and matrix organization of                               references
to topic instances.</dd>
</dlentry><dlentry>
<dt>structural type instance</dt>
<dd>An occurrence of a topic type or a map type in a document.</dd>
</dlentry><dlentry>
<dt>topic instance </dt>
<dd>An occurrence of a topic type in a document.</dd>
</dlentry><dlentry>
<dt>topic type</dt>
<dd>An element type that defines a complete unit of content. The topic type provides the root
            element for the topic and, through the contained element types, the substructure for the
            topic instances. The root element of the topic type is not necessarily the same as the
            root element of a document type; document types can nest multiple topic types and might
            also declare non-DITA wrapper elements as the root element for compatibility with other
            processes.</dd>
</dlentry></dl>           </section>
<section>                <title>Specialization terminology</title> 
              <p>The following terminology is used to discuss DITA
specialization:</p>                <dl><dlentry>
<dt>base content model</dt>
<dd>The content model of a DITA element before specialization or the
                              application of constraints or extensions.</dd>
</dlentry><dlentry>
<dt>base type</dt>
<dd>An element or attribute type that is not a specialization. All
base                               types are defined by the DITA specification.</dd>
</dlentry><dlentry>
<dt>extension element</dt>
<dd>Within a vocabulary module, an element type that can be extended,
                              replaced, or constrained for use in
a DITA document type.</dd>
</dlentry><dlentry>
<dt>generalization</dt>
<dd>The process by which a specialized element is transformed into
a                               less-specialized ancestor element
or a specialized attribute is                               transformed
into a less-specialized ancestor attribute. The original         
                     specialization-hierarchy information may be preserved
in the                               generalized instance, thus allowing
the original specialized type to                               be
recreated from the generalized instance.</dd>
</dlentry><dlentry>
<dt>restricted content model</dt>
<dd>For a DITA element type, a content model that has been restricted from the base content model
            for the element type by one or more of the following mechanisms:<ul>
              <li>Removing optional elements</li>
              <li>Requiring optional elements</li>
              <li>Ordering of unordered elements</li>
              <li>Restricting repeatable (but optional) elements from repeating</li>
            </ul>Content models can be restricted through the use of constraint modules or through
            specialization.</dd>
</dlentry><dlentry>
<dt>selective domain extension</dt>
<dd>An extension that replaces an extension element with element types
that                               are defined in an domain module,
thus making the base type unavailable                            
  in the DITA document-type shell that configures the extension.</dd>
</dlentry><dlentry>
<dt>specialization</dt>
<dd>(1) The act of defining new element or attribute types as a semantic
                              refinement of existing element or attribute
types</dd>
<dd>(2) An element or attribute type that is a specialization of a
base                               type</dd>
<dd>(3) A process by which a generalized element is transformed into
one of                               its more specialized element
types or a generalized attribute is                              
transformed into a more specialized attribute.</dd>
</dlentry><dlentry>
<dt>specialization hierarchy</dt>
<dd>The sequence of element or attribute types, from the most general
to                               most specialized, from which a given
element or attribute type is                               specialized.
The specialization hierarchy for a DITA element is               
               formally declared through its <xmlatt>class</xmlatt> attribute.</dd>
</dlentry><dlentry>
<dt>specialization parent</dt>
<dd>For a given DITA element type, the most specialized of its ancestors
in                               its specialization hierarchy.</dd>
</dlentry><dlentry>
<dt>specialized attribute type</dt>
<dd>An attribute type that is defined as a semantic refinement of another attribute type. The
            attribute type must be specialized from either the <xmlatt>base</xmlatt> or
              <xmlatt>props</xmlatt> attribute, and its range of permissible values must be a subset
            of or identical to the values allowed by the original attribute type.</dd>
</dlentry><dlentry>
<dt>specialized element type</dt>
<dd>An element type that is defined as a semantic refinement of an existing element type. The
            content allowed by the specialized element type must be a subset of or identical to the
            content allowed by the original element type. Within a DITA document, all specialized
            element types must be refinements of one of the base element types, with the exception
            of elements that are used in the context of <xmlelement>foreign</xmlelement> or
              <xmlelement>unknown</xmlelement> elements.</dd>
</dlentry><dlentry>
<dt>structural type</dt>
<dd>A topic type or map type.</dd>
</dlentry></dl>           </section>
<section>                <title>DITA modules</title>             
  <p>The following terminology is used to discuss DITA modules:</p> 
              <dl><dlentry>
<dt>attribute domain module</dt>
<dd>A domain module that defines exactly one specialization of either the <xmlatt>base</xmlatt> or
              <xmlatt>props</xmlatt> attribute.</dd>
</dlentry><dlentry>
<dt>constraint module</dt>
<dd>A set of declarations that imposes additional constraints onto
the                               element or attribute types that
are defined in a specific vocabulary                             
 module.</dd>
</dlentry><dlentry>
<dt>domain module</dt>
<dd>A set of element types or an attribute type that supports a specific subject or functional area.
            Element types or attribute types in a domain can be integrated with topic types or map
            types to enhance semantic support for particular kinds of content. For example, the
            structural type <xmlelement>topic</xmlelement> declares the
              <xmlelement>keyword</xmlelement> element; when integrated with a domain for describing
            user interfaces, new keyword specializations (such as <xmlelement>wintitle</xmlelement>)
            become available wherever <xmlelement>keyword</xmlelement> was allowed in the original
            structural type.</dd>
</dlentry><dlentry>
<dt>element domain module</dt>
<dd>A domain module that defines one or more element types for use
within                               maps or topics.</dd>
</dlentry><dlentry>
<dt>map module</dt>
<dd>A structural module that defines a map type.</dd>
</dlentry><dlentry>
<dt>structural module</dt>
<dd>A vocabulary module that defines a top-level map type or topic type. Structural modules also can
            define specializations of elements from domain modules or other structural modules.</dd>
</dlentry><dlentry>
<dt>topic module</dt>
<dd>A structural module that defines a top-level topic type.</dd>
</dlentry><dlentry>
<dt>vocabulary module</dt>
<dd>A uniquely-named unit of element type or attribute type declaration.
                              There are two types of vocabulary modules:
structural modules and                               domain modules.
For a given map type, topic type, or domain, there is            
                  exactly one vocabulary module that defines it.</dd>
</dlentry></dl>                <p>The following figure illustrates the relationship between a DTD-based DITA
        document, its DITA document-type shell, and the various vocabulary modules that it uses. <ph
          rev="xml-grammars">A similar structure applies to DITA documents that use other XML
          grammars.</ph><fig>
          <title>Instances, modules, and declarations</title>
          <image href="../../images/instances-modules-declarations-01.jpg" width="5in">
            <alt>Shows the relationship between a DITA document, its DITA document-type shell, and
              the various document-type modules that it uses.</alt>
          </image>
        </fig></p>           </section>
<section>                <title>Linking and addressing terms</title>
      <draft-comment author="Kristen Eberlein" time="28 November 2014">
        <p>Moving comments from DITAweb:</p>
        <p>[Robert Anderson:] Just realized, after all that work on cleaning up the terms in the
          keys section, that we also define key terms here. Some terms overlap (key definition, key
          scope, key space), the rest do not. Those that overlap do not use the same definition. I'm
          on the fence about whether the terms should be in both spots. But if they are repeated, we
          should use conref, and use the definitions from the new keys section. We should also
          decide if the key terms that only appear here should appear in the other key topic: key
          resolution context, key name.</p>
        <p>[Robert Anderson] Current plan: use conref for the &lt;dl&gt; of keys concepts so that
          they are consistent here and in the keys section.</p>
        <p>[Eliot Kimber] All formal definitions should be here and should not be repeated elsewhere
          in the spec. </p>
        <p>[Robert Anderson] I don't think I could understand the keys topics without having that
          list of concepts available together with the content. I don't think most people read this
          topic in general when approaching the specification, and if we put keys definitions here
          (and only here) they will get lost. </p>
        <p>[Kris Eberlein] We must have the key definitions in the keys topics. Otherwise, no one
          will read them or understand the material. Obviously, we must ensure that definitions are
          properly implemented using a reuse mechanism. </p>
      </draft-comment> 
              <p>The following terminology is used to discuss linking
and addressing terms:</p>                <dl><dlentry>
<dt>key name</dt>
<dd>An identifier defined by a value of the <xmlatt>keys</xmlatt> attribute. A key is bound to one
            or more of the following items:<ul>
              <li>A resource addressed by the <xmlelement>topicref</xmlelement> element or a
                specialization of the <xmlelement>topicref</xmlelement> element</li>
              <li>An element contained within the <xmlelement>topicmeta</xmlelement> element of the
                  <xmlelement>topicref</xmlelement> element or a specialization of the
                  <xmlelement>topicref</xmlelement> element</li>
            </ul></dd>
</dlentry>
        <dlentry>
          <dt>key definition</dt>
          <dd>A <xmlelement>topicref</xmlelement> element or specialization of a
              <xmlelement>topicref</xmlelement> element that specifies the <xmlatt>keys</xmlatt>
            attribute and defines one or more key names.</dd>
        </dlentry>
        <dlentry rev="DITA1.3 proposal-13004">
          <dt>key scope</dt>
          <dd>A root map <ph rev="review-2">or map branch that is</ph> associated with a unique key
            space for purposes of key reference resolution.</dd>
        </dlentry>
        <dlentry>
          <dt>key space</dt>
          <dd rev="DITA1.3 proposal-13004">The set of unique key names that are defined for a given
            key scope. Within a given key scope, a key name has at most one <ph rev="review-2"
              >effective</ph> definition, as determined by the key definition precedence rules.</dd>
        </dlentry>
        <dlentry>
          <dt>key resolution context</dt>
          <dd rev="DITA1.3 proposal-13004">The key scope that establishes the context for resolving key
            references. For a given key-resolution instance, there is at most one key scope that
            defines the effective key space, which in turn provides the effective key
            definition.</dd>
        </dlentry><dlentry id="referenced-element">
<dt>referenced element</dt>
<dd>An element that is referenced by another DITA element. See also <term>referencing
element</term>.</dd>
<dd><b>Example</b><p>Consider the following code sample from a
                <filepath>installation-reuse.dita</filepath> topic. The
                <xmlelement>step</xmlelement> element that it contains is a referenced element;
              other DITA topics reference the <xmlelement>step</xmlelement> element by using the
                <xmlatt>conref</xmlatt>
              attribute.<codeblock>&lt;step id="run-startcmd-script">
	&lt;cmd>Run the startcmd script that is applicable to your operating-system environment.&lt;/cmd>
&lt;/step></codeblock></p></dd>
</dlentry><dlentry id="referencing-element">
<dt>referencing element</dt>
<dd>An element that references another DITA element by specifying
an                               addressing attribute. See also <term>referenced
element</term> and <term>addressing attribute</term></dd>
<dd><b>Example</b><p>The following <xmlelement>step</xmlelement> element is a referencing element.
              It uses the <xmlatt>conref</xmlatt> attribute to reference a
                <xmlelement>step</xmlelement> element in the
                <filepath>installation-reuse.dita</filepath>
              topic.<codeblock>&lt;step conref="installation-reuse.dita#reuse/run-startcmd-script">
	&lt;cmd/>
&lt;/step></codeblock></p></dd>
</dlentry><dlentry id="addressing-attribute">
<dt>addressing attribute</dt>
<dd>An attribute, such as <xmlatt>conref</xmlatt>, <xmlatt>conkeyref</xmlatt>,
              <xmlatt>keyref</xmlatt>, and <xmlatt>href</xmlatt>, that specifies an address.</dd>
</dlentry></dl>           </section>
</conbody>
</concept>

