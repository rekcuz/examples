<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_yvl_ncv_dn">
 <title>RELAX NG: Coding requirements for element type declarations</title>
 <shortdesc>Structural and domain vocabulary modules have the same coding requirements for element
  type declarations.</shortdesc>
 <conbody>
  <section>
   <title>Module names</title>
   <p>Each vocabulary module has a short name that is used to construct file names, pattern names,
        and other names that are used in associated declarations. Modules also can have abbreviated
        names that further shorten the short name, for example "sw" for the "software" domain, where
        "software" is the short name and "sw" is the abbreviated name. </p>
   <p>For structural modules, the module name <term outputclass="RFC-2119" rev="terminology">MUST</term> be the
    element type name of the top-level topic or map type that is defined by the module, for example,
    "concept" or "bookmap".</p>
   <p>For element domain modules, the module name <term outputclass="RFC-2119" rev="terminology"
          >SHOULD</term> be a name that reflects the subject domain to which the domain applies,
        such as "highlight" or "software". Domain module names should be sufficiently unique that
        they are unlikely to conflict with any other domains.</p>
   <draft-comment author="Kristen Eberlein" time="15 February 2014" disposition="open">This is the
        first instance of the term "element domain modules." Do we want to make this clear
        distinction between element domain and attribute domain modules? If so, we should do so
        consistently throughout the spec.</draft-comment>
   <draft-comment author="Kristen Eberlein" time="15 February 2014" disposition="open">Doesn't the
        material in this section apply to DTD and XSD as well as RNG?</draft-comment>
  </section>
  <section>
   <title>Module files</title>
   <p>A RELAX NG vocabulary module consists of a single module file.</p>
  </section>
  <section id="section_AF5B8ABA77DA4474A0AF0DF0AFD8E018">
   <title>Element definitions</title>
   <p>A structural or element-domain vocabulary module must contain a declaration for each
        specialized element type that is named in the module. While the XML standard allows content
        models to refer to undeclared element types, all element types that are named in content
        models or attribute list declarations within a vocabulary module must have a RELAX NG
        element declaration. The RELAX NG element declaration can occur in one of the following:</p>
      <ul>
        <li>The vocabulary module</li>
        <li>A base module of which the vocabulary module is a direct or indirect specialization</li>
        <li>(If the vocabulary module is a structural module) A required domain or structural
          module</li>
      </ul>
   <p>The element type patterns are organized into the following sections:</p>
      <dl>
        <dlentry>
          <dt>Element type name patterns</dt>
          <dd>
            <p>For each element type that is declared in the vocabulary module, there must be a
              pattern whose name is the element type name and whose content is a reference to the
              element type "<varname>tagname</varname>.element" pattern. For
              example:<codeblock>&lt;div>
  &lt;a:documentation>ELEMENT TYPE NAME PATTERNS&lt;/a:documentation>
  &lt;define name="b">
    &lt;ref name="b.element"/>
  &lt;/define>
  &lt;!-- ... -->
&lt;/div></codeblock></p>
            <p>The element-type name pattern provides a layer of abstraction that facilitates
              redefinition. The element-type name patterns are referenced from content model and
              domain extension patterns. Specialization modules can redeclare the patterns to
              include specializations of the type, allowing the specialized types in all contexts
              where the base type is allowed.</p>
            <p>The declarations can occur in any order. By convention, they are usually ordered
              alphabetically or grouped logically. </p>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Common content-model patterns</dt>
          <dd>Structural and element-domain modules can include a section that defines the patterns
            that contribute to the content models of the element types that are defined in the
              module.<draft-comment author="robander" time="17 February 2015">Not sure why the
              following rule about patterns is a normative SHOULD - there should be no problems
              naming something "reusable.group.content.model"</draft-comment><p>Common content-model
              patterns <term outputclass="RFC-2119" rev="terminology">SHOULD</term> use names that
              end with ".cnt", for example, "body.cnt".</p></dd>
        </dlentry>
        <dlentry>
          <dt>Common attribute sets</dt>
          <dd>Structural and element-domain modules can include a section that defines patterns for
            attribute sets that are common to one or more of the element types that are defined in
            the module.<draft-comment author="robander" time="17 February 2015">Not sure why the
              following rule about patterns is a normative SHOULD - there should be no problems
              naming something "reusable.attribute.set"</draft-comment><p>Common attribute set
              patterns <term outputclass="RFC-2119" rev="terminology">SHOULD</term> use names that
              end with "-atts", for example, "topicref-atts".</p></dd>
        </dlentry>
        <dlentry>
          <dt>Element type declarations</dt>
          <dd>For each element type that is declared in the vocabulary module, there must be a set
            of patterns that define the content model and attributes for the element type. Each set
            of patterns <term outputclass="RFC-2119" rev="terminology">SHOULD</term> be grouped
            within a <xmlelement>div</xmlelement> element.<draft-comment author="robander"
              time="17 February 2015">Want to follow up about the previous rule - "SHOULD be grouped
              within a div - thought coding rules elsewhere said the div was completely
              optional?</draft-comment><p>Each element type <term outputclass="RFC-2119"
                rev="terminology">MUST</term> have a content model pattern named
                  <codeph><varname>tagname</varname>.content</codeph>. The value of the pattern
                <term outputclass="RFC-2119" rev="terminology">MUST</term> be the complete
              content-model definition. For
              example:<codeblock>  &lt;define name="topichead.content">
    &lt;optional>
      &lt;ref name="topicmeta"/>
    &lt;/optional>
    &lt;zeroOrMore>
      &lt;choice>
        &lt;ref name="anchor"/>
        &lt;ref name="data.elements.incl"/>
        &lt;ref name="navref"/>
        &lt;ref name="topicref"/>
      &lt;/choice>
    &lt;/zeroOrMore>
  &lt;/define></codeblock></p><p>The
              content model pattern <ph rev="review-2">can</ph> be overridden in constraint modules
              to further constrain the content model for the element type.</p><p>Each element type
                <term outputclass="RFC-2119" rev="terminology" audience="">MUST</term> have an
              attribute list pattern named <codeph><varname>tagname</varname>.attributes</codeph>.
              The pattern entity <term outputclass="RFC-2119" rev="terminology">MUST</term> declare
              all attributes that are used by the element type (except for the attributes provided
              by the "global-atts" pattern, which is always referenced as part of the attribute list
              declaration for the <xmlatt>class</xmlatt> attribute for an element). For
              example:<codeblock>  &lt;define name="topichead.attributes">
    &lt;optional>
      &lt;attribute name="navtitle"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="outputclass"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="keys"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="copy-to"/>
    &lt;/optional>
    &lt;ref name="topicref-atts"/>
    &lt;ref name="univ-atts"/>
  &lt;/define></codeblock></p><p>The
              attribute list declaration <ph rev="review-2">can</ph> be overridden in constraint
              modules to further constrain the attribute list for the element type.</p><p>Each
              element type <term outputclass="RFC-2119" rev="terminology">MUST</term> have a pattern
              named <codeph><varname>tagname</varname>.element</codeph> that contains an
                <xmlelement>element</xmlelement> element whose <xmlatt>name</xmlatt> value is the
              element type name and whose content is a reference to the
                  <codeph><varname>tagname</varname>.attlist</codeph> and
                  <codeph><varname>tagname</varname>.content</codeph> patterns. For grammars
              intended for use in generating DTD- and XSD-based modules, the
                <xmlelement>element</xmlelement> element <term outputclass="RFC-2119"
                rev="terminology">SHOULD</term> specify the attribute "longName" in the DITA
              architecture namespace
                (<xmlnsname>http://dita.oasis-open.org/architecture/2005/</xmlnsname>, by convention
              bound to the prefix "ditaarch"). For
              example:<codeblock>  &lt;define name="topichead.element">
    &lt;element name="topichead" ditaarch:longName="Topic Head">
      &lt;a:documentation>The &amp;lt;topichead> element provides a title-only entry in a navigation map,
        as an alternative to the fully-linked title provided by the &amp;lt;topicref> element. 
        Category: Mapgroup elements&lt;/a:documentation>
      &lt;ref name="topichead.attlist"/>
      &lt;ref name="topichead.content"/>
    &lt;/element>
  &lt;/define></codeblock></p><draft-comment
              author="robander" time="17 February 2015">RE: preceding paragraph and example - I
              think the "SHOULD" rule about @longName falls into the things we decided to remove (no
              normative requirement for documentation / comments in the grammar), but want to double
              check.</draft-comment><p>Each element type <term outputclass="RFC-2119"
                rev="terminology">MUST</term> have a pattern named
                  <codeph><varname>tagname</varname>.attlist</codeph> with a
                <xmlatt>combine</xmlatt> value of "interleave" that contains only a reference to the
                  <codeph><varname>tagname</varname>.attributes</codeph> pattern. For
              example:<codeblock>&lt;define name="topichead.attlist" combine="interleave">
  &lt;ref name="topichead.attributes"/>
&lt;/define></codeblock></p><p
              outputclass="example">
              <draft-comment author="Kristen Eberlein" time="15 February 2014" disposition="open">
                <p>We need a sentence or more explaining what this code sample illustrates or is an
                  example of.</p>
                <p>From a comment by Eliot Kimber in review #1: ". . . an example of a complete set
                  of patterns for a single element type declaration minus the class attribute
                  declaration."</p>
              </draft-comment>
              <codeblock>&lt;div>
  &lt;a:documentation>LONG NAME: Topic Head&lt;/a:documentation>
  &lt;define name="topichead.content">
    &lt;optional>
      &lt;ref name="topicmeta"/>
    &lt;/optional>
    &lt;zeroOrMore>
      &lt;choice>
        &lt;ref name="anchor"/>
        &lt;ref name="data.elements.incl"/>
        &lt;ref name="navref"/>
        &lt;ref name="topicref"/>
      &lt;/choice>
    &lt;/zeroOrMore>
  &lt;/define>
  &lt;define name="topichead.attributes">
    &lt;optional>
      &lt;attribute name="navtitle"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="outputclass"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="keys"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="copy-to"/>
    &lt;/optional>
    &lt;ref name="topicref-atts"/>
    &lt;ref name="univ-atts"/>
  &lt;/define>
  &lt;define name="topichead.element">
    &lt;element name="topichead" ditaarch:longName="Topic head">
      &lt;a:documentation>The &amp;lt;topichead> element provides a title-only entry in a navigation map,
        as an alternative to the fully-linked title provided by the &amp;lt;topicref> element. 
        Category: Mapgroup elements&lt;/a:documentation>
      &lt;ref name="topichead.attlist"/>
      &lt;ref name="topichead.content"/>
    &lt;/element>
  &lt;/define>
  &lt;define name="topichead.attlist" combine="interleave">
    &lt;ref name="topichead.attributes"/>
  &lt;/define>
&lt;/div></codeblock>
            </p></dd>
        </dlentry>
        <dlentry>
          <dt>idElements pattern contribution</dt>
          <dd>
            <p>Element types that declare the <xmlatt>id</xmlatt> attribute as type "ID", including
              all topic and map element types, <term outputclass="RFC-2119" rev="terminology"
                >MUST</term> be included in the idElements pattern in order to correctly configure
              the "any" pattern overrides that are defined in document type shells. Each such
              element type <term outputclass="RFC-2119" rev="terminology">MUST</term> have a pattern
              declaration named "idElements" with a <xmlatt>combine</xmlatt> value of "choice" and a
              reference to the element-type <codeph><varname>tagname</varname>.element</codeph>
              pattern. The pattern declaration <term outputclass="RFC-2119" rev="terminology"
                >SHOULD</term> follow the "<varname>tagname</varname>.attlist"
              pattern:<codeblock>&lt;div>
  &lt;!-- ... -->
  &lt;define name="map.attlist" combine="interleave">
    &lt;ref name="map.attributes"/>
    &lt;ref name="arch-atts"/>
    &lt;ref name="domains-att"/>
  &lt;/define>
  &lt;define name="idElements" combine="choice">
    &lt;ref name="map.element"/>
  &lt;/define>
&lt;/div></codeblock></p>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Specialization attribute declarations</dt>
          <dd>
            <p>A vocabulary module <term outputclass="RFC-2119" rev="terminology">MUST</term> define
              a <xmlatt>class</xmlatt> attribute for every specialized element that is declared in
              the module.</p>
            <p>This section declares the <xmlatt>class</xmlatt> attributes for the element types
              that are defined in the module.</p>
            <p>For each element type that is defined in the module there <term
                outputclass="RFC-2119" rev="terminology">MUST</term> be a pattern named
                  <codeph><varname>tagname</varname>.attlist</codeph> that contains a reference to
              the attribute list pattern "global-atts" and defines an optional attribute named
              "class". The default value for the <xmlatt>class</xmlatt> attribute <term
                outputclass="RFC-2119" rev="terminology">MUST</term> include the value of the
                <xmlatt>class</xmlatt> attribute of the base element; the element name qualified by
              the topic element name with at least one leading and trailing space must be appended.
              The <xmlatt>class</xmlatt> attribute for an element that is introduced by a structural
              specialization <term outputclass="RFC-2119" rev="terminology">MUST</term> start with a
              minus sign ("-"). The <xmlatt>class</xmlatt> attribute for a domain specialization
                <term outputclass="RFC-2119" rev="terminology">MUST</term> start with a plus sign
              ("+"). The initial minus or plus sign <term outputclass="RFC-2119" rev="terminology"
                >MUST</term> be followed by one or more spaces. The attribute value <term
                outputclass="RFC-2119" rev="terminology">MUST</term> end with one or more trailing
                spaces.<draft-comment author="robander" time="17 February 2015">I'm pretty sure the
                previous paragraph is repeating rules we define elsewhere for @class</draft-comment>
            </p>
            <p>The default value for the attribute is declared using the
                <xmlatt>a:defaultValue</xmlatt> attribute.</p>
            <p>For
              example:<codeblock>&lt;define name="anchorref.attlist" combine="interleave">
  &lt;ref name="global-atts"/>
  &lt;optional>
    &lt;attribute name="class" 
        a:defaultValue="+ map/topicref mapgroup-d/anchorref "
    />
  &lt;/optional>
&lt;/define></codeblock></p>
            <draft-comment author="robander" time="17 February 2015">I don't know why the following
              would be a MUST - it's a convention, but grammars should work just fine even if
              somebody chose to define @class within the group that defines other attributes for an
              element (I've seen this done with DTDs).</draft-comment>
            <p>The <xmlatt>class</xmlatt> attribute declarations for a module <term
                outputclass="RFC-2119" rev="terminology">MUST</term> be grouped together at the end
              of the module after all other declarations. The <xmlatt>class</xmlatt> attribute
              declarations can occur in any order. By convention, they are often ordered
              alphabetically or grouped logically.</p>
            <p>See <xref href="classatt.dita#classatt" format="dita"/> for more information about
              the <xmlatt>class</xmlatt> attribute.</p>
          </dd>
        </dlentry>
      </dl>
  </section>
 </conbody>
</concept>
