<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="processing_key_references">
    <title>Processing key references to generate text or link text</title>
    <shortdesc>Key references can be used to pull text from the key definition. This topic explains
        how to generate text from a key definition, regardless of whether the key reference also
        results in a link.</shortdesc>
    <conbody>
        <note>The processing described in this topic is unrelated to the <xmlatt>conkeyref</xmlatt>
            attribute. In that case <xmlatt>conkeyref</xmlatt> is used to determine the target of a
                <xmlatt>conref</xmlatt> attribute, after which the normal <xmlatt>conref</xmlatt>
            rules apply.</note>
        <p>Empty elements that include a key reference with a defined key might get their effective
            content from the key definition. Empty elements are defined as elements that meet the
            following criteria:</p>
        <ul>
            <li>Have no text content</li>
            <li>Have no sub-elements<draft-comment author="robander" time="September 16 2014"
                    disposition="open">There is a recognized edge case that could confuse
                    processors. What if my specialization has a required kid. For validity, I must
                    include that kid. (Same issue tends to come up with conref on something like
                    &lt;step> or &lt;table>). For example, if I have an image with required &lt;alt>
                    child, to be valid it must be: &lt;myImage keyref="a">&lt;alt/>&lt;/myImage>.
                    This can never be empty, thus can never pull the alt-text along with @href.
                        <p>Not sure what the alternative is though. Originally considered text:
                        "Have no sub-elements that contain text or result in text". But as Chris
                        pointed out this is troublesome - how can a processor know if a child
                        element will result in text? Will &lt;myData/> result in text? What if it
                        results in text for PDF but not HTML - then does my effective content get
                        pulled from the key for one and not the other? What if you have &lt;keyword>
                        child with @conref, but @conref doesn't resolve or pulls nothing? In that
                        case again we have something that may be empty now but resolve later. So,
                        for now using the much simpler "no sub-elements" rule, while recognizing
                        that the edge case exists.</p></draft-comment></li>
            <li>Have no attributes that would be used as text content (such as <xmlatt>alt</xmlatt>
                on the <xmlelement>image</xmlelement> element)</li>
        </ul>
        <p rev="review-2">When an empty element as defined above references a key definition that
            has a child <xmlelement>topicmeta</xmlelement> element, content from that
                <xmlelement>topicmeta</xmlelement> element is used to determine the effective
            content of the referencing element. Effective content from the key definition becomes
            the element content, with the following exceptions: </p>
        <ul>
            <li>For empty <xmlelement>image</xmlelement> elements, effective content is used as
                alternate text, equivalent to creating an <xmlelement>alt</xmlelement> sub-element
                to hold that content.</li>
            <li>For empty <xmlelement>link</xmlelement> elements, effective content is used as link
                text, equivalent to creating a <xmlelement>linktext</xmlelement> sub-element to hold
                that content.</li>
            <li>For empty <xmlelement>link</xmlelement> and <xmlelement>xref</xmlelement> elements,
                a key definition can be used to provide a short description in addition to the
                normal effective content. If the key definition includes
                    <xmlelement>shortdesc</xmlelement> inside of <xmlelement>topicmeta</xmlelement>,
                that <xmlelement>shortdesc</xmlelement> should be used to provide effective content
                for a <xmlelement>desc</xmlelement>
                sub-element.<!--<draft-comment author="robander" time="29 July 2014" disposition="open">Original DITA 1.2 text for this was: "For <xmlelement>link</xmlelement> tags with a <xmlatt>keyref</xmlatt> attribute, the contents of the <xmlelement>shortdesc</xmlelement> tag in the key-defining element should provide the <xmlelement>desc</xmlelement> contents." This restatement expands that to &lt;xref> which I believe is the intent. It also tries to stay consistent by using the term "effective content". Hopefully it is as clear / clearer.</draft-comment>--></li>
            <li>The <xmlelement>longdescref</xmlelement> and <xmlelement>longquoteref</xmlelement>
                elements are empty elements with no effective content. Key definitions are not used
                to set effective text for these elements.</li>
            <li>The <xmlelement>param</xmlelement> element does not have any effective content, so
                it does not pull any content.</li>
            <li>The <xmlelement>indextermref</xmlelement> element is not completely defined, so
                determining effective content for this element is also left undefined.</li>
            <li product="technicalContent">The <xmlelement>abbreviated-form</xmlelement> is an empty
                element with special rules that determine effective content.</li>
        </ul>
        <p>Effective text content is determined using the following set of rules:</p>
        <ol>
            <li product="technicalContent">For the <xmlelement>abbreviated-form</xmlelement>
                element, see the rules described in <xref
                    href="../../langRef/technicalContent/abbreviated-form.dita"/></li>
            <li>If an element does not allow the <xmlatt>href</xmlatt> attribute, content is taken
                from the first <xmlelement>keyword</xmlelement> element inside of
                    <xmlelement>keywords</xmlelement> inside of the
                    <xmlelement>topicmeta</xmlelement>. For example, given the following key
                definition, empty <xmlelement>keyword</xmlelement>, <xmlelement>term</xmlelement>,
                and <xmlelement>dt</xmlelement> elements with the attribute
                    <codeph>keyref="nohref"</codeph> would all result in the matching content
                "first":<codeblock>&lt;keydef keys="nohref">
  &lt;topicmeta>
    &lt;keywords>&lt;keyword>first&lt;/keyword>&lt;keyword>second&lt;/keyword>&lt;keyword>third&lt;/keyword>&lt;/keywords>
  &lt;/topicmeta>
&lt;/keydef></codeblock></li>
            <li>For elements that do allow <xmlatt>href</xmlatt>, elements from within
                    <xmlelement>topicmeta</xmlelement> that are legal within the element using
                    <xmlatt>keyref</xmlatt> are considered matching text. For example, the
                    <xmlelement>xref</xmlelement> element allows <xmlatt>href</xmlatt>, and also
                allows <xmlelement>keyword</xmlelement> as a child. Using the code sample from the
                previous item, an empty <xmlelement>xref</xmlelement> with
                    <codeph>keyref="test"</codeph> would use all three of these elements as text
                content; after processing, the result would be equivalent
                to:<codeblock>&lt;xref keyref="test">&lt;keyword>first&lt;/keyword>&lt;keyword>second&lt;/keyword>&lt;keyword>third&lt;/keyword>&lt;/xref></codeblock></li>
            <li>Otherwise, if <xmlelement>linktext</xmlelement> is specified inside of
                    <xmlelement>topicmeta</xmlelement>, the contents of
                    <xmlelement>linktext</xmlelement> are used as the effective content. <note
                    rev="DITA1.3">Because all elements that pull text will eventually look for
                    content in the <xmlelement>linktext</xmlelement> element, using
                        <xmlelement>linktext</xmlelement> for effective content is a best practice
                    for cases where all elements getting text from a key definition should result in
                    the same value.</note></li>
            <li>Otherwise, if the element with the key reference results in a link, normal link text
                determination rules apply as they would for <xmlelement>xref</xmlelement> (for
                example, using the <xmlelement>navtitle</xmlelement> or falling back to the URI of
                the link target).</li>
        </ol>
        <draft-comment author="robander" time="July 29 2014" disposition="open">I think from close
            review that we should have a rule in here that is specific to elements allowed inside of
            &lt;topicmeta> -- that is, author, source, data, and data-about. If those exist as a
            child of &lt;topicmeta> in the key definition, then they are used to provide the content
            for the same elements with @keyref. I think (but am not sure) that this is the correct
            interpretation of the following line in the DITA 1.2 spec: "When a key definition has a
            &lt;topicmeta> subelement, elements that refer to that key and that are empty may get
            their effective content from the first matching subelement of the &lt;topicmeta>
            subelement of the key-defining topicref." I've left it out until others
            confirm.</draft-comment>
        <p>When the effective content for a key reference element results in <ph rev="review-2"
                >invalid elements, those elements <term outputclass="RFC-2119" rev="terminology">SHOULD</term>
                be generalized to produce a valid result.</ph> For example,
                <xmlelement>linktext</xmlelement> in the key definition may use a domain
            specialization of <xmlelement>keyword</xmlelement> that is not valid in the key
            reference context, in which case the specialized element should be generalized to
                <xmlelement>keyword</xmlelement>. If the generalized content is also not valid, a
            text equivalent should be used instead. For example, <xmlelement>linktext</xmlelement>
            may include <xmlelement>ph</xmlelement> or a specialized <xmlelement>ph</xmlelement> in
            the key definition, but neither of those are valid as the effective content for a
                <xmlelement>keyword</xmlelement>. In that case, the text content of the
                <xmlelement>ph</xmlelement> should be used.<draft-comment author="robander"
                time="29 July 2014" disposition="open">This is a change from DITA 1.2, but one that
                is needed to avoid nonsensical results. The 1.2 language was: "Elements within
                    <xmlelement>linktext</xmlelement> that do not match the content model of the key
                reference directly or after generalization should be skipped. " In this case, the
                following key definition would give varying results:<codeblock>&lt;keydef keys="ph">
  &lt;topicmeta>
    &lt;linktext>This is &lt;b>IMPORTANT&lt;/b>&lt;/linktext>
  &lt;/topicmeta>
&lt;/keydef></codeblock><ul>
                    <li>In contexts where &lt;b> is legal, the effective content would be "This is
                        &lt;b>IMPORTANT&lt;/b>".</li>
                    <li>In contexts where &lt;ph> is legal but there is no highlight domain, the
                        effective content would be "This is &lt;ph>IMPORTANT&lt;/ph>"</li>
                    <li>Problem: in contexts where &lt;ph> is not legal (such as when creating
                        effective text for &lt;keyword>), a strict interpretation of the spec would
                        drop the &lt;b> or &lt;ph> element, and mean the effective content is "This
                        is "</li>
                </ul></draft-comment></p>
        <!--For posterity / easy reference, the text from DITA 1.2 that was expanded to most of the above: <p>When a key definition has a <xmlelement>topicmeta</xmlelement> subelement, elements that refer to that key and that are empty may get their effective content from the first matching subelement of the <xmlelement>topicmeta</xmlelement> subelement of the key-defining <xmlelement>topicref</xmlelement>. If no matching element is found, the contents of the <xmlelement>linktext</xmlelement> tag, if present, should be used. Elements within <xmlelement>linktext</xmlelement> that do not match the content model of the key reference directly or after generalization should be skipped. For <xmlelement>link</xmlelement> tags with a <xmlatt>keyref</xmlatt> attribute, the contents of the <xmlelement>shortdesc</xmlelement> tag in the key-defining element should provide the <xmlelement>desc</xmlelement> contents.</p>-->
    </conbody>
</concept>
