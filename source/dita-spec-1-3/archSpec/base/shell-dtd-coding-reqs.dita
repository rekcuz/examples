<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="shell-dtd-coding-reqs" xml:lang="en-us">
  <title>DTD document-type shell: Coding requirements</title>
  <shortdesc>A document type shell integrates one or more topic type or map type modules, zero or
    more domain modules, and zero or more constraint modules. A DTD document type shell is organized
    into sections, where each section contains a specific type of declaration.</shortdesc>
  <conbody>
    <p><ph rev="review-2">With the exception of the composite document type,</ph> DTD document type
      shells <term outputclass="RFC-2119" rev="terminology">MUST NOT</term> directly declare element
      types or attributes.</p>
    <draft-comment author="robander" time="20 February 2014">Maybe we can get consistent here? Use
      conref? Or does the use of @domains for XSD cause problems?<ul>
        <li>Text from DTD doctype:<p>Each section of the document type shell <ph rev="review-2"
              >must</ph> occur in the following order. The modular DTD approach to specialization
            and constraints relies heavily upon parameter entities. Parameter entities must be
            declared before they are used, so the order defined below is necessary in order to
            support those features while complying with more basic XML parsing rules.</p></li>
        <li>Text from RNG:<p>RELAX NG document-type shells <term outputclass="RFC-2119"
              rev="terminology">MUST NOT</term> directly declare element types or attributes. A
            RELAX NG document-type shell <term outputclass="RFC-2119" rev="terminology">MUST</term>
            conform to the following coding requirements, as well as the requirements defined in
              <xref href="using-relax-ng.dita"/>.</p></li>
        <li>Text from XSD:<p>XSD document type shells <term outputclass="RFC-2119" rev="terminology"
              >MUST NOT</term> directly declare element types or attributes (except for the
              <xmlatt>domains</xmlatt> attribute, which always reflects the details of the domains
            and structural types integrated by the shell).</p></li>
      </ul></draft-comment>
    <p>Each section of the document type shell <ph rev="review-2">must</ph> occur in the following
      order. The modular DTD approach to specialization and constraints relies heavily upon
      parameter entities. Parameter entities must be declared before they are used, so the order
      defined below is necessary in order to support those features while complying with more basic
      XML parsing rules.</p>
    <p>A DTD-based document-type shell contains the following sections:</p>
    <dl>
      <dlentry>
        <dt>Topic or map entity inclusions</dt>
        <dd>This section includes the entity declaration files for the structural topic or map types
          that the shell configures. These files define tokens that are used within the
            <xmlatt>domains</xmlatt> attribute for the document type shell.</dd>
      </dlentry>
      <dlentry>
        <dt>Domain entity inclusions</dt>
        <dd>This section includes the entity declaration files for each element domain that is
          integrated into the document type shell. These files define additional tokens that are
          used within the <xmlatt>domains</xmlatt> attribute for the document type shell.</dd>
      </dlentry>
      <dlentry>
        <dt>Domain attribute inclusions</dt>
        <dd>This section includes the files that define specialized attributes. Each file includes
          both the attribute extension and a token for the <xmlatt>domains</xmlatt> attribute.</dd>
      </dlentry>
      <dlentry>
        <dt>Element extension redefinitions</dt>
        <dd>This section redefines parameter entities to include extension elements; it does so by
          referencing entities in the "Domain entity inclusion" files. Each redefinition effectively
          means "Where element <xmlelement>X</xmlelement> is already allowed, also allow these
          domain specializations."</dd>
      </dlentry>
      <dlentry>
        <dt>Attribute extension redefinitions</dt>
        <dd>This section redefines parameter entities to add extension attributes; it does so by
          referencing entities in the "Domain attribute inclusion" files. Each redefinition
          effectively means "Where <xmlatt>props</xmlatt> or <xmlatt>base</xmlatt> are allowed, also
          allow these specialized attributes."</dd>
      </dlentry>
      <dlentry>
        <dt>Topic nesting redefinitions</dt>
        <dd>This section determines how topics nest. For example, it could specify that
            <xmlelement>topic</xmlelement> can only nest <xmlelement>topic</xmlelement>, or that it
          can nest <xmlelement>task</xmlelement> and <xmlelement>reference</xmlelement>, or that it
          doesn't allow any nested topics at all. The section applies only to document type shells
          for topics.</dd>
      </dlentry>
      <dlentry>
        <dt>Domain declaration redefinition</dt>
        <dd>This section uses all of the previously-defined domain tokens to set a default value for
          the <xmlatt>domains</xmlatt> attribute.</dd>
      </dlentry>
      <dlentry>
        <dt>Content constraint module inclusions</dt>
        <dd>This section references constraint modules. Placing it before the following modules
          ensures that constraints are established before the default content models or attribute
          sets are defined.</dd>
      </dlentry>
      <dlentry>
        <dt>Structural definition inclusions</dt>
        <dd>This section defines content models and attribute sets for the core map or topic
          elements. Each module after the core topic or map module defines additional specialized
          elements.</dd>
      </dlentry>
      <dlentry>
        <dt>Element domain definition inclusions</dt>
        <dd>This section defines content models and attribute sets for specialized domain elements.
          This section is usually placed after the "Structural definition inclusions", but in some
          cases the two sections may be mixed; an example of this is included below.<draft-comment
            author="robander" time="10 February 2015">There is no technical requirement to have
            "highlight domain" module come after "task" module, though we require it by setting up
            these sections. If my APIRef doc depended on the programming domain, I would either need
            to embed the programmingDomain.mod before the APIRef structural module, or I would need
            the APIRef module to predeclare the %apiname; parameter entity (and any other entities I
            use).</draft-comment></dd>
      </dlentry>
    </dl>
    <!--<p>Shells <term outputclass="RFC-2119" rev="terminology">SHOULD</term> have an initial set of comments that describe the shell and indicate the public identifiers, URNs, or absolute URLs by which the shell should be referenced in DOCTYPE declarations. </p>-->
    <p>Each of the sections in a DTD-based document-type shell establishes rules for encoding. These
      rules ensure that the shell follows all XML parsing rules for DTDs, while also establishing a
      modular design that simplifies creation of new document type shells. By convention,
        <filepath>.ent</filepath> is used to indicate files that only define parameter entities,
      while <filepath>.mod</filepath> is used to indicate files that define elements or
      constraints.</p>
    <dl>
      <dlentry>
        <dt>Topic or map entity inclusions</dt>
        <dd>
          <p>This section <term outputclass="RFC-2119" rev="terminology">MUST</term> declare and
            reference as an external parameter entity file for the top-level topic or map type the
            shell is configuring, as well as for any additional structural specialization module
            used by the shell. Each <filepath>.ent</filepath> file contributes a domain token for
            structural topics or maps. The entity is named <codeph>%<i>typename</i>-dec</codeph>.
            For example, a shell that uses the "concept" specialization would
            include:<codeblock>&lt;!ENTITY % concept-dec     
  PUBLIC "-//OASIS//ENTITIES DITA 1.3 Concept//EN" 
         "concept.ent"
>%concept-dec;</codeblock></p>
          <!--<p rev="DITA1.3 proposal-13121">This section <term outputclass="RFC-2119" rev="terminology">MUST</term> declare and reference as an external parameter entity the <filepath>.ent</filepath> file for any additional structural specialization modules on which the primary specialization depends; the entity is named <codeph>%<i>typename</i>-dec</codeph>. For example, if a troubleshooting specialization is specialized from topic but includes elements from task, it will need to include the <filepath>.ent</filepath> file for task:</p><codeblock rev="DITA1.3 proposal-13121">&lt;!ENTITY % task-dec     
  PUBLIC "-//OASIS//ENTITIES DITA 1.3 Task//EN" 
         "task.ent"
>%task-dec;</codeblock>-->
        </dd>
      </dlentry>
      <dlentry>
        <dt>Domain entity inclusions</dt>
        <dd>
          <p>For each element domain included in the shell, this section <term
              outputclass="RFC-2119" rev="terminology">MUST</term> declare and reference an external
            parameter entity for the domain's entity declaration file. The name of the parameter
            entity consists of the domain name plus the <codeph>dec</codeph> suffix. In the
            following example, the entity file for the highlight domain is included in a document
            type shell:</p>
          <codeblock><![CDATA[<!ENTITY % hi-d-dec PUBLIC
    "-//OASIS//ENTITIES DITA Highlight Domain//EN" 
    "highlightDomain.ent"
>%hi-d-dec;]]></codeblock>
        </dd>
      </dlentry>
      <dlentry>
        <dt>Domain attribute inclusions</dt>
        <dd>
          <p>For each attribute domain included in the shell, this section <term
              outputclass="RFC-2119" rev="terminology">MUST</term> declare and reference an external
            parameter entity for the domain's entity declaration. The name of the parameter entity
            consists of the domain name plus the <codeph>ent</codeph> suffix. In the following
            example, the entity file for a new attribute domain is included in a document type
            shell:</p>
          <codeblock><![CDATA[<!ENTITY % newAtt-d-dec PUBLIC
    "-//My Company//ENTITIES New Attribute Domain//EN"
    "newAttDomain.ent"
>%newAtt-d-dec;]]></codeblock>
        </dd>
      </dlentry>
      <dlentry>
        <dt>Element extension redefinitions</dt>
        <dd>
          <p>For each element that is extended by one or more domains, the document type shell
            redefines the entity for the element. These entities are used by later modules to define
            content models; predefining the entity adds domain specializations wherever the base
            element is allowed.</p>
          <draft-comment author="robander" time="10 February 2015">
            <p>Original text: "The new definition is a disjunctive list of alternatives comprising
              the literal name of the element followed by the element extension entity from each
              domain that is providing specializations." IMHO technically innacurate, as it's only
              followed by an extension entity from each domain <i>that specializes this element</i>.
              I've made that change.</p>
            <p>But about the word "disjunctive": adjective 1. lacking connection."the novel's
              disjunctive detail". 2. (of a conjunction) expressing a choice between two mutually
              exclusive possibilities, for example <i>or</i> in <i>she asked if he was going or
                staying</i>. </p>
            <p>Is that correct here? I had to look up the word because I never took Latin.</p>
          </draft-comment>
          <draft-comment author="robander" time="10 February 2015">This talked about "redefining"
            entities. In strict DTD terms, it's defined ahead of the normal one. So shouldn't it be
            "predefine"? Or maybe just "define"?</draft-comment>
          <p>The new definition is a disjunctive list of alternatives comprising the literal name of
            the element followed by the element extension entity from each domain that specializes
            this element. The value of the entity can optionally omit any base types from which
            other types listed are specialized. Omitting a base type constitutes a form of
            constraint; the constraint <term outputclass="RFC-2119" rev="terminology">MUST</term> be
            represented by a constraint module that declares the <xmlatt>domains</xmlatt> attribute
            declaration for the constraint.</p>
          <p>In the following example, the entity for the <xmlelement>pre</xmlelement> element is
            defined to allow specializations from the programming, software, and user interface
            domains:</p>
          <codeblock><![CDATA[<!ENTITY % pre
    "pre        | 
     %pr-d-pre; | 
     %sw-d-pre; | 
     %ui-d-pre;">]]></codeblock>
          <p>In the following example, the <xmlelement>pre</xmlelement> base type is removed from
            the entity declaration, effectively allowing only specializations of
              <xmlelement>pre</xmlelement>, but not <xmlelement>pre</xmlelement> itself. This
            omission would require the use of a constraint module later in the shell:<codeblock><![CDATA[<!ENTITY % pre
    "%pr-d-pre; | 
     %sw-d-pre; | 
     %ui-d-pre;">]]></codeblock></p>
          <draft-comment author="robander" time="10 February 2015">
            <p>I've integrated the following note, along with normative language, into the language
              above. I'm also not certain the example is valid. If the shell already defines %pre;
              before the constraint module is included, then the first and third lines of the
              following code sample are useless.</p>
            <note>Omitting base types from domain extensions constitutes a form of constraint. The
              constraint <term outputclass="RFC-2119" rev="terminology">MUST</term> be represented
              by a constraint module that declares the <xmlatt>domains</xmlatt> attribute
              declaration for the constraint. For the omission of <xmlelement>pre</xmlelement> in
              the preceding example the constraint might be called "noBasePre-c" and would be
              declared in a file named "noBasePreConstraint.mod", containing the following
              declarations:
              <codeblock>&lt;!ENTITY noBasePre-c-pre  "%pr-d-pre; | %sw-d-pre; | %ui-d-pre;">
&lt;!ENTITY noBasePre-c-att  "(topic noBasePre-c)" >
&lt;!ENTITY % pre          “%noBasePre-c-pre ;“></codeblock></note>
          </draft-comment>
        </dd>
      </dlentry>
      <dlentry>
        <dt>Attribute extension redefinitions</dt>
        <dd>
          <p>The <xmlatt>props</xmlatt> and <xmlatt>base</xmlatt> attributes are used together with
            entities that allow for extension. These entities have a null value by default (meaning
            there are no default specialized attributes). For each attribute domain included by the
            shell, the shell <term outputclass="RFC-2119" rev="terminology">MUST</term> add an
            extension to the entity for the relevant attribute. In the following example, the
              <xmlatt>props</xmlatt> attribute is specialized to create the <xmlatt>new</xmlatt> and
              <xmlatt>othernew</xmlatt> attributes, while the <xmlatt>base</xmlatt> attribute is
            specialized to create <xmlatt>newfrombase</xmlatt> and
            <xmlatt>othernewfrombase</xmlatt>:</p>
          <codeblock>&lt;!ENTITY % props-attribute-extensions
        "%newAtt-d-attribute; 
         %othernewAtt-d-attribute;"&gt;
&lt;!ENTITY % base-attribute-extensions
        "%newfrombaseAtt-d-attribute; 
         %othernewfrombaseAtt-d-attribute;"&gt;
</codeblock>
        </dd>
      </dlentry>
      <dlentry>
        <dt>Topic nesting redefinitions</dt>
        <dd>
          <p>For each topic type integrated in the shell, the document type shell can control
            nesting of subtopics by redefining the
              <codeph><varname>topictype</varname>-info-types</codeph> entity. The definition is
            usually (but not necessarily) an OR list of topic types that can be nested in the
            corresponding parent topic type. Use the literal root element name of each topic, not
            the corresponding element entity. In the following example, the entity specifies that
              <xmlelement>concept</xmlelement> can nest any number of
              <xmlelement>concept</xmlelement> or <xmlelement>myTopicType</xmlelement> topics, in
            any order:</p>
          <codeblock><![CDATA[<!ENTITY % concept-info-types "concept | myTopicType">]]></codeblock>
          <p>When the entity for a specific topic type is not defined in the shell, it will
            typically fall back to using the <codeph>info-types</codeph> parameter entity. Thus the
            document type shell can also set the default for most topic types by defining the global
              <codeph>info-types</codeph> entity. In the following example, most topics in this
            shell will now be able to nest any number of <xmlelement>concept</xmlelement> or
              <xmlelement>myTopicType</xmlelement> topics, in any order:</p>
          <codeblock>&lt;!ENTITY % info-types "concept | myTopicType"></codeblock>
        </dd>
      </dlentry>
      <dlentry>
        <dt>Domain declaration redefinition</dt>
        <dd>
          <p>The domain declaration redefinition section sets the effective value of the
              <xmlatt>domains</xmlatt> attribute for the topic or map type modules integrated into
            the shell.</p>
          <p rev="DITA1.3 proposal-13121">The document type shell <term outputclass="RFC-2119"
              rev="terminology">MUST</term> redefine the <codeph>included-domains</codeph> entity to
            include the text entity for each for each domain, constraint, and structural
            specialization that is either included in the document type or reused in the document
            type. In the following example, entities are included for both the troubleshooting
            specialization and for the task specialization on which troubleshooting depends; for the
            element domains hi-d (highlighting) and ut-d (utilities); for the attribute domain
            newAtt-d; and for the constraint noBasePre-c:</p>
          <codeblock rev="DITA1.3 proposal-13121"><![CDATA[<!ENTITY included-domains
    "&troubleshooting-att;
     &task-att;
     &hi-d-att; 
     &ut-d-att; 
     &newAtt-d-att;
     &noBasePre-c-ph;
   "
>]]></codeblock>
          <note>Although parameter entities must be defined before they are referenced, text
            entities can be referenced before their definition. This allows the
              <codeph>included-domains</codeph> parameter entity to include the constraint entity,
            which will not be defined until the constraint module is referenced later.</note>
          <!--<p>For a domain or structural module, the <xmlatt>domains</xmlatt> attribute value entity is declared in the .ent file. For constraint modules, the <xmlatt>domains</xmlatt> attribute value entity is declared in the module's .mod file since constraint modules do not use separate .ent files.</p>-->
        </dd>
      </dlentry>
      <dlentry>
        <dt>Content constraint module inclusions</dt>
        <dd>
          <p>For each constraint module integrated in the shell, the shell <term
              outputclass="RFC-2119" rev="terminology">MUST</term> declare and reference an external
            parameter entity for the constraint's <filepath>.mod</filepath> file. The entity name
            for the constraint declaration consists of the constraint module name plus the <codeph
              rev="DITA1.2-errata">-c-def</codeph> suffix. For example, this constraint inclusion
            for the task topic type constrains the DITA 1.3 relaxed task content model to match the
            more constrained DITA 1.1 task content
            model:<codeblock>&lt;!ENTITY % strictTaskbody-c-def  
  PUBLIC "-//OASIS//ELEMENTS DITA 1.3 Strict Taskbody Constraint//EN" 
  "strictTaskbodyConstraint.mod"
>%strictTaskbody-c-def;</codeblock></p>
        </dd>
      </dlentry>
      <dlentry>
        <dt>Structural definition inclusions</dt>
        <!--<dd>This section defines content models and attribute sets for the core map or topic elements. Each module after the core topic or map module defines additional specialized elements.</dd>-->
        <dd>
          <p>For each structural type integrated in the document type, the document type shell <term
              outputclass="RFC-2119" rev="terminology">MUST</term> declare and reference an external
            parameter entity for the structural type module's <filepath>.mod</filepath> file. The
            entity name consists of the name of the structural type plus a <codeph>-type</codeph>
            suffix. </p>
          <p rev="DITA1.3 proposal-13121">Modules should be included in ancestry order, starting
            with topic or map (this is required by parsers so that entities used in an ancestor
            module are available for use in the specialization). For example, a specialization
            called cppAPIRef that specialized from reference would include the modules for topic,
            reference, and cppAPIRef in that order. </p>
          <p rev="DITA1.3 proposal-13121">Likewise, when a structural module depends on elements
            from another module that is not part of its ancestry, then the module it depends on
            should be included before the module that depends on it, along with any ancestor modules
            not already included. For example, If a specialization called cppProgrammingTask
            specialized from task and needed to include some elements from cppAPIRef, then it would
            include the modules for topic, task, cppAPIRef, and cppProgrammingTask in that
            order.</p>
          <p>In the following example, the base module for topics is declared and referenced by the
            shell:</p>
          <codeblock><![CDATA[<!ENTITY % topic-type PUBLIC
    "-//OASIS//ELEMENTS DITA Topic//EN" 
    "topic.mod"
>%topic-type;]]></codeblock>
        </dd>
      </dlentry>
      <dlentry>
        <dt>Element domain definition inclusions</dt>
        <!--<dd>This section defines content models and attribute sets for specialized domain elements. <draft-comment author="robander" time="10 February 2015">Need to think through this: in general, there is no requirement to have "highlight domain" module come after "task" module, though we require it by setting up these sections. I think if my APIRef doc depended on the software domain, I would either need to embed the softwareDomain.mod first (fine from XML perspective) or I would need to redeclare the %apiname; type parameter entities that I use.</draft-comment></dd>-->
        <dd>
          <p>For each element domain used in the document type, the document type shell <term
              outputclass="RFC-2119" rev="terminology">MUST</term> declare and reference an external
            parameter entity for the domain definition module file. The entity name consists of the
            domain name plus a <codeph>-def</codeph> suffix. For example:</p>
          <codeblock><![CDATA[<!ENTITY % hi-d-def PUBLIC
    "-//OASIS//ELEMENTS DITA Highlight Domain//EN" 
    "highlightDomain.mod"
>%hi-d-def;]]></codeblock>
          <note>If a structural module depends on a domain, the domain module should be included
            before the structural module. This erases the boundary between the final two sections,
            but is necessary to ensure that modules are embedded after their dependencies.
            Technically (to ensure XML validity), the only solid requirement is that both domain and
            structural modules be declared after all other modules that they specialize from or
            depend on.</note>
        </dd>
      </dlentry>
    </dl>
  </conbody>
</concept>
